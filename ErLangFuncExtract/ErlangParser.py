# Generated from Erlang.g4 by ANTLR 4.9.3
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3K")
        buf.write("\u04b5\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\3\2\6\2\u00f8\n\2\r\2\16\2\u00f9\3\2\3\2\3")
        buf.write("\3\3\3\5\3\u0100\n\3\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3")
        buf.write("\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n")
        buf.write("\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u0120\n\n\3\13\3")
        buf.write("\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u012a\n\13\3\f")
        buf.write("\3\f\3\f\3\f\3\f\5\f\u0131\n\f\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\5\r\u013b\n\r\3\16\3\16\3\16\3\16\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\5\17\u014e\n\17\3\20\3\20\3\20\3\20\3\21\3\21\3\21\7")
        buf.write("\21\u0157\n\21\f\21\16\21\u015a\13\21\3\22\3\22\3\22\5")
        buf.write("\22\u015f\n\22\3\23\3\23\3\23\7\23\u0164\n\23\f\23\16")
        buf.write("\23\u0167\13\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\5\24\u0172\n\24\3\25\3\25\3\25\7\25\u0177\n\25\f")
        buf.write("\25\16\25\u017a\13\25\3\26\3\26\3\26\5\26\u017f\n\26\3")
        buf.write("\26\3\26\3\27\3\27\3\27\5\27\u0186\n\27\3\30\3\30\3\30")
        buf.write("\5\30\u018b\n\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\7")
        buf.write("\31\u0194\n\31\f\31\16\31\u0197\13\31\3\32\3\32\3\32\3")
        buf.write("\32\3\32\3\32\3\32\7\32\u01a0\n\32\f\32\16\32\u01a3\13")
        buf.write("\32\3\33\5\33\u01a6\n\33\3\33\3\33\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u01f6\n\34\3\35\3")
        buf.write("\35\3\35\3\35\3\35\3\35\5\35\u01fe\n\35\3\36\3\36\5\36")
        buf.write("\u0202\n\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37\7\37\u020b")
        buf.write("\n\37\f\37\16\37\u020e\13\37\3 \3 \3 \3 \3!\3!\3!\7!\u0217")
        buf.write("\n!\f!\16!\u021a\13!\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3")
        buf.write("#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u0230\n#\3$\3$\3$\3")
        buf.write("$\3%\3%\3%\3%\3%\3%\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3")
        buf.write("&\3&\3&\3&\5&\u024b\n&\3\'\3\'\3\'\7\'\u0250\n\'\f\'\16")
        buf.write("\'\u0253\13\'\3(\3(\3(\3(\3(\3)\3)\3*\3*\5*\u025e\n*\3")
        buf.write("+\3+\3+\3,\3,\3,\5,\u0266\n,\3-\3-\3-\7-\u026b\n-\f-\16")
        buf.write("-\u026e\13-\3.\3.\3.\7.\u0273\n.\f.\16.\u0276\13.\3/\3")
        buf.write("/\3/\7/\u027b\n/\f/\16/\u027e\13/\3\60\3\60\3\60\3\60")
        buf.write("\5\60\u0284\n\60\3\61\3\61\3\61\3\61\7\61\u028a\n\61\f")
        buf.write("\61\16\61\u028d\13\61\3\62\3\62\3\62\3\62\7\62\u0293\n")
        buf.write("\62\f\62\16\62\u0296\13\62\3\63\3\63\3\63\3\63\7\63\u029c")
        buf.write("\n\63\f\63\16\63\u029f\13\63\3\64\3\64\3\64\3\64\5\64")
        buf.write("\u02a5\n\64\3\65\3\65\5\65\u02a9\n\65\3\66\3\66\3\66\5")
        buf.write("\66\u02ae\n\66\3\67\3\67\3\67\5\67\u02b3\n\67\38\38\3")
        buf.write("8\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\5")
        buf.write("8\u02c9\n8\39\39\39\59\u02ce\n9\3:\3:\3:\3:\5:\u02d4\n")
        buf.write(":\3;\3;\3;\3;\5;\u02da\n;\3<\3<\3<\3<\3<\3<\3<\7<\u02e3")
        buf.write("\n<\f<\16<\u02e6\13<\3=\3=\3=\3=\3=\3=\3=\7=\u02ef\n=")
        buf.write("\f=\16=\u02f2\13=\3>\3>\3>\3>\5>\u02f8\n>\3?\3?\5?\u02fc")
        buf.write("\n?\3@\3@\5@\u0300\n@\3A\3A\3B\3B\3B\3B\3B\3B\3B\3B\3")
        buf.write("B\5B\u030d\nB\3C\3C\5C\u0311\nC\3C\3C\3C\3C\3C\3C\7C\u0319")
        buf.write("\nC\fC\16C\u031c\13C\3D\3D\3D\3D\3D\5D\u0323\nD\3E\3E")
        buf.write("\3E\3E\3E\3E\5E\u032b\nE\3F\3F\3F\3F\3F\3F\3F\3F\3F\5")
        buf.write("F\u0336\nF\3G\3G\3G\3G\3G\3G\5G\u033e\nG\3H\3H\3H\7H\u0343")
        buf.write("\nH\fH\16H\u0346\13H\3I\3I\3I\3I\3J\5J\u034d\nJ\3J\3J")
        buf.write("\3K\3K\5K\u0353\nK\3L\3L\5L\u0357\nL\3M\3M\3M\7M\u035c")
        buf.write("\nM\fM\16M\u035f\13M\3N\3N\3N\5N\u0364\nN\3O\3O\3P\3P")
        buf.write("\3P\3P\3P\3P\3Q\3Q\3Q\3Q\3Q\3Q\3R\3R\3R\7R\u0377\nR\f")
        buf.write("R\16R\u037a\13R\3S\3S\3S\3S\3S\3S\3S\3S\3S\5S\u0385\n")
        buf.write("S\3T\3T\5T\u0389\nT\3T\3T\3U\3U\5U\u038f\nU\3U\3U\3U\3")
        buf.write("U\3U\3U\7U\u0397\nU\fU\16U\u039a\13U\3V\3V\3V\3V\7V\u03a0")
        buf.write("\nV\fV\16V\u03a3\13V\5V\u03a5\nV\3V\3V\3W\3W\5W\u03ab")
        buf.write("\nW\3X\3X\3X\3X\3Y\3Y\3Y\3Y\3Z\3Z\3[\3[\5[\u03b9\n[\3")
        buf.write("[\3[\3[\3[\3[\5[\u03c0\n[\3[\3[\3[\3[\3[\3[\5[\u03c8\n")
        buf.write("[\7[\u03ca\n[\f[\16[\u03cd\13[\3\\\3\\\5\\\u03d1\n\\\3")
        buf.write("\\\3\\\3]\3]\3]\7]\u03d8\n]\f]\16]\u03db\13]\3^\3^\5^")
        buf.write("\u03df\n^\3^\3^\3^\3_\3_\3_\3`\3`\3`\3`\3a\3a\3a\7a\u03ee")
        buf.write("\na\fa\16a\u03f1\13a\3b\3b\3b\3c\3c\3c\3c\3c\3c\3d\3d")
        buf.write("\3d\7d\u03ff\nd\fd\16d\u0402\13d\3e\3e\3e\3e\3f\3f\3f")
        buf.write("\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\5f\u0419\n")
        buf.write("f\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\5g\u042b")
        buf.write("\ng\3h\3h\5h\u042f\nh\3i\3i\5i\u0433\ni\3j\3j\3j\7j\u0438")
        buf.write("\nj\fj\16j\u043b\13j\3k\3k\3k\3k\3k\3k\3k\3k\3k\5k\u0446")
        buf.write("\nk\3l\3l\3l\3l\5l\u044c\nl\3l\3l\3m\3m\3m\3m\3m\3m\3")
        buf.write("m\3m\3m\3m\3m\3m\3m\3m\5m\u045e\nm\3n\3n\3n\7n\u0463\n")
        buf.write("n\fn\16n\u0466\13n\3o\3o\3o\3o\3o\3o\3o\5o\u046f\no\3")
        buf.write("o\3o\3o\3o\3o\5o\u0476\no\3p\3p\5p\u047a\np\3q\3q\5q\u047e")
        buf.write("\nq\3q\3q\3r\3r\5r\u0484\nr\3r\3r\3s\3s\3s\7s\u048b\n")
        buf.write("s\fs\16s\u048e\13s\3t\3t\3t\7t\u0493\nt\ft\16t\u0496\13")
        buf.write("t\3u\3u\3u\7u\u049b\nu\fu\16u\u049e\13u\3v\3v\3v\3v\3")
        buf.write("v\6v\u04a5\nv\rv\16v\u04a6\5v\u04a9\nv\3w\3w\3x\3x\3y")
        buf.write("\3y\3z\3z\3{\3{\3{\2\t\60\62vx\u0084\u00a8\u00b4|\2\4")
        buf.write("\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64")
        buf.write("\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc")
        buf.write("\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de")
        buf.write("\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0")
        buf.write("\u00f2\u00f4\2\t\3\2\26\27\3\2\34\35\4\2\4\4,.\5\2\32")
        buf.write("\32\"\"/\62\5\2\4\4,,\638\3\29:\3\2;B\2\u04cf\2\u00f7")
        buf.write("\3\2\2\2\4\u00ff\3\2\2\2\6\u0103\3\2\2\2\b\u0105\3\2\2")
        buf.write("\2\n\u0107\3\2\2\2\f\u0109\3\2\2\2\16\u010b\3\2\2\2\20")
        buf.write("\u010d\3\2\2\2\22\u011f\3\2\2\2\24\u0129\3\2\2\2\26\u0130")
        buf.write("\3\2\2\2\30\u013a\3\2\2\2\32\u013c\3\2\2\2\34\u014d\3")
        buf.write("\2\2\2\36\u014f\3\2\2\2 \u0153\3\2\2\2\"\u015b\3\2\2\2")
        buf.write("$\u0160\3\2\2\2&\u0171\3\2\2\2(\u0173\3\2\2\2*\u017e\3")
        buf.write("\2\2\2,\u0182\3\2\2\2.\u0187\3\2\2\2\60\u018c\3\2\2\2")
        buf.write("\62\u0198\3\2\2\2\64\u01a5\3\2\2\2\66\u01f5\3\2\2\28\u01fd")
        buf.write("\3\2\2\2:\u01ff\3\2\2\2<\u0207\3\2\2\2>\u020f\3\2\2\2")
        buf.write("@\u0213\3\2\2\2B\u021b\3\2\2\2D\u022f\3\2\2\2F\u0231\3")
        buf.write("\2\2\2H\u0235\3\2\2\2J\u024a\3\2\2\2L\u024c\3\2\2\2N\u0254")
        buf.write("\3\2\2\2P\u0259\3\2\2\2R\u025d\3\2\2\2T\u025f\3\2\2\2")
        buf.write("V\u0265\3\2\2\2X\u0267\3\2\2\2Z\u026f\3\2\2\2\\\u0277")
        buf.write("\3\2\2\2^\u027f\3\2\2\2`\u0285\3\2\2\2b\u028e\3\2\2\2")
        buf.write("d\u0297\3\2\2\2f\u02a4\3\2\2\2h\u02a8\3\2\2\2j\u02ad\3")
        buf.write("\2\2\2l\u02af\3\2\2\2n\u02c8\3\2\2\2p\u02ca\3\2\2\2r\u02cf")
        buf.write("\3\2\2\2t\u02d5\3\2\2\2v\u02db\3\2\2\2x\u02e7\3\2\2\2")
        buf.write("z\u02f7\3\2\2\2|\u02fb\3\2\2\2~\u02ff\3\2\2\2\u0080\u0301")
        buf.write("\3\2\2\2\u0082\u030c\3\2\2\2\u0084\u030e\3\2\2\2\u0086")
        buf.write("\u031d\3\2\2\2\u0088\u032a\3\2\2\2\u008a\u0335\3\2\2\2")
        buf.write("\u008c\u033d\3\2\2\2\u008e\u033f\3\2\2\2\u0090\u0347\3")
        buf.write("\2\2\2\u0092\u034c\3\2\2\2\u0094\u0352\3\2\2\2\u0096\u0356")
        buf.write("\3\2\2\2\u0098\u0358\3\2\2\2\u009a\u0360\3\2\2\2\u009c")
        buf.write("\u0365\3\2\2\2\u009e\u0367\3\2\2\2\u00a0\u036d\3\2\2\2")
        buf.write("\u00a2\u0373\3\2\2\2\u00a4\u0384\3\2\2\2\u00a6\u0386\3")
        buf.write("\2\2\2\u00a8\u038c\3\2\2\2\u00aa\u039b\3\2\2\2\u00ac\u03aa")
        buf.write("\3\2\2\2\u00ae\u03ac\3\2\2\2\u00b0\u03b0\3\2\2\2\u00b2")
        buf.write("\u03b4\3\2\2\2\u00b4\u03b6\3\2\2\2\u00b6\u03ce\3\2\2\2")
        buf.write("\u00b8\u03d4\3\2\2\2\u00ba\u03de\3\2\2\2\u00bc\u03e3\3")
        buf.write("\2\2\2\u00be\u03e6\3\2\2\2\u00c0\u03ea\3\2\2\2\u00c2\u03f2")
        buf.write("\3\2\2\2\u00c4\u03f5\3\2\2\2\u00c6\u03fb\3\2\2\2\u00c8")
        buf.write("\u0403\3\2\2\2\u00ca\u0418\3\2\2\2\u00cc\u042a\3\2\2\2")
        buf.write("\u00ce\u042e\3\2\2\2\u00d0\u0432\3\2\2\2\u00d2\u0434\3")
        buf.write("\2\2\2\u00d4\u0445\3\2\2\2\u00d6\u0447\3\2\2\2\u00d8\u045d")
        buf.write("\3\2\2\2\u00da\u045f\3\2\2\2\u00dc\u0475\3\2\2\2\u00de")
        buf.write("\u0479\3\2\2\2\u00e0\u047b\3\2\2\2\u00e2\u0481\3\2\2\2")
        buf.write("\u00e4\u0487\3\2\2\2\u00e6\u048f\3\2\2\2\u00e8\u0497\3")
        buf.write("\2\2\2\u00ea\u04a8\3\2\2\2\u00ec\u04aa\3\2\2\2\u00ee\u04ac")
        buf.write("\3\2\2\2\u00f0\u04ae\3\2\2\2\u00f2\u04b0\3\2\2\2\u00f4")
        buf.write("\u04b2\3\2\2\2\u00f6\u00f8\5\4\3\2\u00f7\u00f6\3\2\2\2")
        buf.write("\u00f8\u00f9\3\2\2\2\u00f9\u00f7\3\2\2\2\u00f9\u00fa\3")
        buf.write("\2\2\2\u00fa\u00fb\3\2\2\2\u00fb\u00fc\7\2\2\3\u00fc\3")
        buf.write("\3\2\2\2\u00fd\u0100\5\22\n\2\u00fe\u0100\5L\'\2\u00ff")
        buf.write("\u00fd\3\2\2\2\u00ff\u00fe\3\2\2\2\u0100\u0101\3\2\2\2")
        buf.write("\u0101\u0102\7\3\2\2\u0102\5\3\2\2\2\u0103\u0104\7C\2")
        buf.write("\2\u0104\7\3\2\2\2\u0105\u0106\7D\2\2\u0106\t\3\2\2\2")
        buf.write("\u0107\u0108\7E\2\2\u0108\13\3\2\2\2\u0109\u010a\7F\2")
        buf.write("\2\u010a\r\3\2\2\2\u010b\u010c\7G\2\2\u010c\17\3\2\2\2")
        buf.write("\u010d\u010e\7H\2\2\u010e\21\3\2\2\2\u010f\u0110\7\4\2")
        buf.write("\2\u0110\u0111\5\6\4\2\u0111\u0112\5J&\2\u0112\u0120\3")
        buf.write("\2\2\2\u0113\u0114\7\4\2\2\u0114\u0115\5\6\4\2\u0115\u0116")
        buf.write("\5\30\r\2\u0116\u0120\3\2\2\2\u0117\u0118\7\4\2\2\u0118")
        buf.write("\u0119\5\6\4\2\u0119\u011a\7\5\2\2\u011a\u011b\5\30\r")
        buf.write("\2\u011b\u011c\7\6\2\2\u011c\u0120\3\2\2\2\u011d\u011e")
        buf.write("\7I\2\2\u011e\u0120\5\24\13\2\u011f\u010f\3\2\2\2\u011f")
        buf.write("\u0113\3\2\2\2\u011f\u0117\3\2\2\2\u011f\u011d\3\2\2\2")
        buf.write("\u0120\23\3\2\2\2\u0121\u0122\5\26\f\2\u0122\u0123\5 ")
        buf.write("\21\2\u0123\u012a\3\2\2\2\u0124\u0125\7\5\2\2\u0125\u0126")
        buf.write("\5\26\f\2\u0126\u0127\5 \21\2\u0127\u0128\7\6\2\2\u0128")
        buf.write("\u012a\3\2\2\2\u0129\u0121\3\2\2\2\u0129\u0124\3\2\2\2")
        buf.write("\u012a\25\3\2\2\2\u012b\u0131\5\6\4\2\u012c\u012d\5\6")
        buf.write("\4\2\u012d\u012e\7\7\2\2\u012e\u012f\5\6\4\2\u012f\u0131")
        buf.write("\3\2\2\2\u0130\u012b\3\2\2\2\u0130\u012c\3\2\2\2\u0131")
        buf.write("\27\3\2\2\2\u0132\u0133\5V,\2\u0133\u0134\7\b\2\2\u0134")
        buf.write("\u0135\5\32\16\2\u0135\u013b\3\2\2\2\u0136\u0137\5V,\2")
        buf.write("\u0137\u0138\7\t\2\2\u0138\u0139\5*\26\2\u0139\u013b\3")
        buf.write("\2\2\2\u013a\u0132\3\2\2\2\u013a\u0136\3\2\2\2\u013b\31")
        buf.write("\3\2\2\2\u013c\u013d\7\n\2\2\u013d\u013e\5\34\17\2\u013e")
        buf.write("\u013f\7\13\2\2\u013f\33\3\2\2\2\u0140\u014e\5\36\20\2")
        buf.write("\u0141\u0142\5\36\20\2\u0142\u0143\7\b\2\2\u0143\u0144")
        buf.write("\5\34\17\2\u0144\u014e\3\2\2\2\u0145\u0146\5V,\2\u0146")
        buf.write("\u0147\7\b\2\2\u0147\u0148\5\34\17\2\u0148\u014e\3\2\2")
        buf.write("\2\u0149\u014a\5\36\20\2\u014a\u014b\7\b\2\2\u014b\u014c")
        buf.write("\5\u00e4s\2\u014c\u014e\3\2\2\2\u014d\u0140\3\2\2\2\u014d")
        buf.write("\u0141\3\2\2\2\u014d\u0145\3\2\2\2\u014d\u0149\3\2\2\2")
        buf.write("\u014e\35\3\2\2\2\u014f\u0150\5V,\2\u0150\u0151\7\t\2")
        buf.write("\2\u0151\u0152\5*\26\2\u0152\37\3\2\2\2\u0153\u0158\5")
        buf.write("\"\22\2\u0154\u0155\7\f\2\2\u0155\u0157\5\"\22\2\u0156")
        buf.write("\u0154\3\2\2\2\u0157\u015a\3\2\2\2\u0158\u0156\3\2\2\2")
        buf.write("\u0158\u0159\3\2\2\2\u0159!\3\2\2\2\u015a\u0158\3\2\2")
        buf.write("\2\u015b\u015e\5:\36\2\u015c\u015d\7\r\2\2\u015d\u015f")
        buf.write("\5$\23\2\u015e\u015c\3\2\2\2\u015e\u015f\3\2\2\2\u015f")
        buf.write("#\3\2\2\2\u0160\u0165\5&\24\2\u0161\u0162\7\b\2\2\u0162")
        buf.write("\u0164\5&\24\2\u0163\u0161\3\2\2\2\u0164\u0167\3\2\2\2")
        buf.write("\u0165\u0163\3\2\2\2\u0165\u0166\3\2\2\2\u0166%\3\2\2")
        buf.write("\2\u0167\u0165\3\2\2\2\u0168\u0169\5\6\4\2\u0169\u016a")
        buf.write("\7\5\2\2\u016a\u016b\5(\25\2\u016b\u016c\7\6\2\2\u016c")
        buf.write("\u0172\3\2\2\2\u016d\u016e\5\b\5\2\u016e\u016f\7\t\2\2")
        buf.write("\u016f\u0170\5*\26\2\u0170\u0172\3\2\2\2\u0171\u0168\3")
        buf.write("\2\2\2\u0171\u016d\3\2\2\2\u0172\'\3\2\2\2\u0173\u0178")
        buf.write("\5*\26\2\u0174\u0175\7\b\2\2\u0175\u0177\5*\26\2\u0176")
        buf.write("\u0174\3\2\2\2\u0177\u017a\3\2\2\2\u0178\u0176\3\2\2\2")
        buf.write("\u0178\u0179\3\2\2\2\u0179)\3\2\2\2\u017a\u0178\3\2\2")
        buf.write("\2\u017b\u017c\5\b\5\2\u017c\u017d\7\t\2\2\u017d\u017f")
        buf.write("\3\2\2\2\u017e\u017b\3\2\2\2\u017e\u017f\3\2\2\2\u017f")
        buf.write("\u0180\3\2\2\2\u0180\u0181\5,\27\2\u0181+\3\2\2\2\u0182")
        buf.write("\u0185\5.\30\2\u0183\u0184\7\16\2\2\u0184\u0186\5,\27")
        buf.write("\2\u0185\u0183\3\2\2\2\u0185\u0186\3\2\2\2\u0186-\3\2")
        buf.write("\2\2\u0187\u018a\5\60\31\2\u0188\u0189\7\17\2\2\u0189")
        buf.write("\u018b\5\60\31\2\u018a\u0188\3\2\2\2\u018a\u018b\3\2\2")
        buf.write("\2\u018b/\3\2\2\2\u018c\u018d\b\31\1\2\u018d\u018e\5\62")
        buf.write("\32\2\u018e\u0195\3\2\2\2\u018f\u0190\f\4\2\2\u0190\u0191")
        buf.write("\5\u00f0y\2\u0191\u0192\5\62\32\2\u0192\u0194\3\2\2\2")
        buf.write("\u0193\u018f\3\2\2\2\u0194\u0197\3\2\2\2\u0195\u0193\3")
        buf.write("\2\2\2\u0195\u0196\3\2\2\2\u0196\61\3\2\2\2\u0197\u0195")
        buf.write("\3\2\2\2\u0198\u0199\b\32\1\2\u0199\u019a\5\64\33\2\u019a")
        buf.write("\u01a1\3\2\2\2\u019b\u019c\f\4\2\2\u019c\u019d\5\u00ee")
        buf.write("x\2\u019d\u019e\5\64\33\2\u019e\u01a0\3\2\2\2\u019f\u019b")
        buf.write("\3\2\2\2\u01a0\u01a3\3\2\2\2\u01a1\u019f\3\2\2\2\u01a1")
        buf.write("\u01a2\3\2\2\2\u01a2\63\3\2\2\2\u01a3\u01a1\3\2\2\2\u01a4")
        buf.write("\u01a6\5\u00ecw\2\u01a5\u01a4\3\2\2\2\u01a5\u01a6\3\2")
        buf.write("\2\2\u01a6\u01a7\3\2\2\2\u01a7\u01a8\5\66\34\2\u01a8\65")
        buf.write("\3\2\2\2\u01a9\u01aa\7\5\2\2\u01aa\u01ab\5*\26\2\u01ab")
        buf.write("\u01ac\7\6\2\2\u01ac\u01f6\3\2\2\2\u01ad\u01f6\5\b\5\2")
        buf.write("\u01ae\u01f6\5\6\4\2\u01af\u01b0\5\6\4\2\u01b0\u01b1\7")
        buf.write("\5\2\2\u01b1\u01b2\7\6\2\2\u01b2\u01f6\3\2\2\2\u01b3\u01b4")
        buf.write("\5\6\4\2\u01b4\u01b5\7\5\2\2\u01b5\u01b6\5(\25\2\u01b6")
        buf.write("\u01b7\7\6\2\2\u01b7\u01f6\3\2\2\2\u01b8\u01b9\5\6\4\2")
        buf.write("\u01b9\u01ba\7\7\2\2\u01ba\u01bb\5\6\4\2\u01bb\u01bc\7")
        buf.write("\5\2\2\u01bc\u01bd\7\6\2\2\u01bd\u01f6\3\2\2\2\u01be\u01bf")
        buf.write("\5\6\4\2\u01bf\u01c0\7\7\2\2\u01c0\u01c1\5\6\4\2\u01c1")
        buf.write("\u01c2\7\5\2\2\u01c2\u01c3\5(\25\2\u01c3\u01c4\7\6\2\2")
        buf.write("\u01c4\u01f6\3\2\2\2\u01c5\u01c6\7\20\2\2\u01c6\u01f6")
        buf.write("\7\21\2\2\u01c7\u01c8\7\20\2\2\u01c8\u01c9\5*\26\2\u01c9")
        buf.write("\u01ca\7\21\2\2\u01ca\u01f6\3\2\2\2\u01cb\u01cc\7\20\2")
        buf.write("\2\u01cc\u01cd\5*\26\2\u01cd\u01ce\7\b\2\2\u01ce\u01cf")
        buf.write("\7\22\2\2\u01cf\u01d0\7\21\2\2\u01d0\u01f6\3\2\2\2\u01d1")
        buf.write("\u01d2\7\23\2\2\u01d2\u01d3\7\n\2\2\u01d3\u01f6\7\13\2")
        buf.write("\2\u01d4\u01d5\7\23\2\2\u01d5\u01d6\7\n\2\2\u01d6\u01d7")
        buf.write("\5<\37\2\u01d7\u01d8\7\13\2\2\u01d8\u01f6\3\2\2\2\u01d9")
        buf.write("\u01da\7\n\2\2\u01da\u01f6\7\13\2\2\u01db\u01dc\7\n\2")
        buf.write("\2\u01dc\u01dd\5(\25\2\u01dd\u01de\7\13\2\2\u01de\u01f6")
        buf.write("\3\2\2\2\u01df\u01e0\7\23\2\2\u01e0\u01e1\5\6\4\2\u01e1")
        buf.write("\u01e2\7\n\2\2\u01e2\u01e3\7\13\2\2\u01e3\u01f6\3\2\2")
        buf.write("\2\u01e4\u01e5\7\23\2\2\u01e5\u01e6\5\6\4\2\u01e6\u01e7")
        buf.write("\7\n\2\2\u01e7\u01e8\5@!\2\u01e8\u01e9\7\13\2\2\u01e9")
        buf.write("\u01f6\3\2\2\2\u01ea\u01f6\5D#\2\u01eb\u01f6\5\f\7\2\u01ec")
        buf.write("\u01f6\5\16\b\2\u01ed\u01ee\7\24\2\2\u01ee\u01ef\7\5\2")
        buf.write("\2\u01ef\u01f6\7\6\2\2\u01f0\u01f1\7\24\2\2\u01f1\u01f2")
        buf.write("\7\5\2\2\u01f2\u01f3\58\35\2\u01f3\u01f4\7\6\2\2\u01f4")
        buf.write("\u01f6\3\2\2\2\u01f5\u01a9\3\2\2\2\u01f5\u01ad\3\2\2\2")
        buf.write("\u01f5\u01ae\3\2\2\2\u01f5\u01af\3\2\2\2\u01f5\u01b3\3")
        buf.write("\2\2\2\u01f5\u01b8\3\2\2\2\u01f5\u01be\3\2\2\2\u01f5\u01c5")
        buf.write("\3\2\2\2\u01f5\u01c7\3\2\2\2\u01f5\u01cb\3\2\2\2\u01f5")
        buf.write("\u01d1\3\2\2\2\u01f5\u01d4\3\2\2\2\u01f5\u01d9\3\2\2\2")
        buf.write("\u01f5\u01db\3\2\2\2\u01f5\u01df\3\2\2\2\u01f5\u01e4\3")
        buf.write("\2\2\2\u01f5\u01ea\3\2\2\2\u01f5\u01eb\3\2\2\2\u01f5\u01ec")
        buf.write("\3\2\2\2\u01f5\u01ed\3\2\2\2\u01f5\u01f0\3\2\2\2\u01f6")
        buf.write("\67\3\2\2\2\u01f7\u01f8\7\5\2\2\u01f8\u01f9\7\22\2\2\u01f9")
        buf.write("\u01fa\7\6\2\2\u01fa\u01fb\7\25\2\2\u01fb\u01fe\5*\26")
        buf.write("\2\u01fc\u01fe\5:\36\2\u01fd\u01f7\3\2\2\2\u01fd\u01fc")
        buf.write("\3\2\2\2\u01fe9\3\2\2\2\u01ff\u0201\7\5\2\2\u0200\u0202")
        buf.write("\5(\25\2\u0201\u0200\3\2\2\2\u0201\u0202\3\2\2\2\u0202")
        buf.write("\u0203\3\2\2\2\u0203\u0204\7\6\2\2\u0204\u0205\7\25\2")
        buf.write("\2\u0205\u0206\5*\26\2\u0206;\3\2\2\2\u0207\u020c\5> ")
        buf.write("\2\u0208\u0209\7\b\2\2\u0209\u020b\5> \2\u020a\u0208\3")
        buf.write("\2\2\2\u020b\u020e\3\2\2\2\u020c\u020a\3\2\2\2\u020c\u020d")
        buf.write("\3\2\2\2\u020d=\3\2\2\2\u020e\u020c\3\2\2\2\u020f\u0210")
        buf.write("\5*\26\2\u0210\u0211\t\2\2\2\u0211\u0212\5*\26\2\u0212")
        buf.write("?\3\2\2\2\u0213\u0218\5B\"\2\u0214\u0215\7\b\2\2\u0215")
        buf.write("\u0217\5B\"\2\u0216\u0214\3\2\2\2\u0217\u021a\3\2\2\2")
        buf.write("\u0218\u0216\3\2\2\2\u0218\u0219\3\2\2\2\u0219A\3\2\2")
        buf.write("\2\u021a\u0218\3\2\2\2\u021b\u021c\5\6\4\2\u021c\u021d")
        buf.write("\7\t\2\2\u021d\u021e\5*\26\2\u021eC\3\2\2\2\u021f\u0220")
        buf.write("\7\30\2\2\u0220\u0230\7\31\2\2\u0221\u0222\7\30\2\2\u0222")
        buf.write("\u0223\5F$\2\u0223\u0224\7\31\2\2\u0224\u0230\3\2\2\2")
        buf.write("\u0225\u0226\7\30\2\2\u0226\u0227\5H%\2\u0227\u0228\7")
        buf.write("\31\2\2\u0228\u0230\3\2\2\2\u0229\u022a\7\30\2\2\u022a")
        buf.write("\u022b\5F$\2\u022b\u022c\7\b\2\2\u022c\u022d\5H%\2\u022d")
        buf.write("\u022e\7\31\2\2\u022e\u0230\3\2\2\2\u022f\u021f\3\2\2")
        buf.write("\2\u022f\u0221\3\2\2\2\u022f\u0225\3\2\2\2\u022f\u0229")
        buf.write("\3\2\2\2\u0230E\3\2\2\2\u0231\u0232\5\b\5\2\u0232\u0233")
        buf.write("\7\7\2\2\u0233\u0234\5\66\34\2\u0234G\3\2\2\2\u0235\u0236")
        buf.write("\5\b\5\2\u0236\u0237\7\7\2\2\u0237\u0238\5\b\5\2\u0238")
        buf.write("\u0239\7\32\2\2\u0239\u023a\5\66\34\2\u023aI\3\2\2\2\u023b")
        buf.write("\u024b\5V,\2\u023c\u023d\7\5\2\2\u023d\u023e\5V,\2\u023e")
        buf.write("\u023f\7\6\2\2\u023f\u024b\3\2\2\2\u0240\u0241\5V,\2\u0241")
        buf.write("\u0242\7\b\2\2\u0242\u0243\5\u00e4s\2\u0243\u024b\3\2")
        buf.write("\2\2\u0244\u0245\7\5\2\2\u0245\u0246\5V,\2\u0246\u0247")
        buf.write("\7\b\2\2\u0247\u0248\5\u00e4s\2\u0248\u0249\7\6\2\2\u0249")
        buf.write("\u024b\3\2\2\2\u024a\u023b\3\2\2\2\u024a\u023c\3\2\2\2")
        buf.write("\u024a\u0240\3\2\2\2\u024a\u0244\3\2\2\2\u024bK\3\2\2")
        buf.write("\2\u024c\u0251\5N(\2\u024d\u024e\7\f\2\2\u024e\u0250\5")
        buf.write("N(\2\u024f\u024d\3\2\2\2\u0250\u0253\3\2\2\2\u0251\u024f")
        buf.write("\3\2\2\2\u0251\u0252\3\2\2\2\u0252M\3\2\2\2\u0253\u0251")
        buf.write("\3\2\2\2\u0254\u0255\5\6\4\2\u0255\u0256\5P)\2\u0256\u0257")
        buf.write("\5R*\2\u0257\u0258\5T+\2\u0258O\3\2\2\2\u0259\u025a\5")
        buf.write("\u00e2r\2\u025aQ\3\2\2\2\u025b\u025c\7\r\2\2\u025c\u025e")
        buf.write("\5\u00e8u\2\u025d\u025b\3\2\2\2\u025d\u025e\3\2\2\2\u025e")
        buf.write("S\3\2\2\2\u025f\u0260\7\25\2\2\u0260\u0261\5\u00e4s\2")
        buf.write("\u0261U\3\2\2\2\u0262\u0263\7\33\2\2\u0263\u0266\5V,\2")
        buf.write("\u0264\u0266\5X-\2\u0265\u0262\3\2\2\2\u0265\u0264\3\2")
        buf.write("\2\2\u0266W\3\2\2\2\u0267\u026c\5Z.\2\u0268\u0269\t\3")
        buf.write("\2\2\u0269\u026b\5Z.\2\u026a\u0268\3\2\2\2\u026b\u026e")
        buf.write("\3\2\2\2\u026c\u026a\3\2\2\2\u026c\u026d\3\2\2\2\u026d")
        buf.write("Y\3\2\2\2\u026e\u026c\3\2\2\2\u026f\u0274\5\\/\2\u0270")
        buf.write("\u0271\7\36\2\2\u0271\u0273\5\\/\2\u0272\u0270\3\2\2\2")
        buf.write("\u0273\u0276\3\2\2\2\u0274\u0272\3\2\2\2\u0274\u0275\3")
        buf.write("\2\2\2\u0275[\3\2\2\2\u0276\u0274\3\2\2\2\u0277\u027c")
        buf.write("\5^\60\2\u0278\u0279\7\37\2\2\u0279\u027b\5^\60\2\u027a")
        buf.write("\u0278\3\2\2\2\u027b\u027e\3\2\2\2\u027c\u027a\3\2\2\2")
        buf.write("\u027c\u027d\3\2\2\2\u027d]\3\2\2\2\u027e\u027c\3\2\2")
        buf.write("\2\u027f\u0283\5`\61\2\u0280\u0281\5\u00f4{\2\u0281\u0282")
        buf.write("\5`\61\2\u0282\u0284\3\2\2\2\u0283\u0280\3\2\2\2\u0283")
        buf.write("\u0284\3\2\2\2\u0284_\3\2\2\2\u0285\u028b\5b\62\2\u0286")
        buf.write("\u0287\5\u00f2z\2\u0287\u0288\5b\62\2\u0288\u028a\3\2")
        buf.write("\2\2\u0289\u0286\3\2\2\2\u028a\u028d\3\2\2\2\u028b\u0289")
        buf.write("\3\2\2\2\u028b\u028c\3\2\2\2\u028ca\3\2\2\2\u028d\u028b")
        buf.write("\3\2\2\2\u028e\u0294\5d\63\2\u028f\u0290\5\u00f0y\2\u0290")
        buf.write("\u0291\5d\63\2\u0291\u0293\3\2\2\2\u0292\u028f\3\2\2\2")
        buf.write("\u0293\u0296\3\2\2\2\u0294\u0292\3\2\2\2\u0294\u0295\3")
        buf.write("\2\2\2\u0295c\3\2\2\2\u0296\u0294\3\2\2\2\u0297\u029d")
        buf.write("\5f\64\2\u0298\u0299\5\u00eex\2\u0299\u029a\5f\64\2\u029a")
        buf.write("\u029c\3\2\2\2\u029b\u0298\3\2\2\2\u029c\u029f\3\2\2\2")
        buf.write("\u029d\u029b\3\2\2\2\u029d\u029e\3\2\2\2\u029ee\3\2\2")
        buf.write("\2\u029f\u029d\3\2\2\2\u02a0\u02a1\5\u00ecw\2\u02a1\u02a2")
        buf.write("\5f\64\2\u02a2\u02a5\3\2\2\2\u02a3\u02a5\5h\65\2\u02a4")
        buf.write("\u02a0\3\2\2\2\u02a4\u02a3\3\2\2\2\u02a5g\3\2\2\2\u02a6")
        buf.write("\u02a9\5\u00a8U\2\u02a7\u02a9\5j\66\2\u02a8\u02a6\3\2")
        buf.write("\2\2\u02a8\u02a7\3\2\2\2\u02a9i\3\2\2\2\u02aa\u02ae\5")
        buf.write("\u00bc_\2\u02ab\u02ae\5\u00b4[\2\u02ac\u02ae\5l\67\2\u02ad")
        buf.write("\u02aa\3\2\2\2\u02ad\u02ab\3\2\2\2\u02ad\u02ac\3\2\2\2")
        buf.write("\u02aek\3\2\2\2\u02af\u02b2\5n8\2\u02b0\u02b1\7\7\2\2")
        buf.write("\u02b1\u02b3\5n8\2\u02b2\u02b0\3\2\2\2\u02b2\u02b3\3\2")
        buf.write("\2\2\u02b3m\3\2\2\2\u02b4\u02c9\5\b\5\2\u02b5\u02c9\5")
        buf.write("\u00eav\2\u02b6\u02c9\5\u0088E\2\u02b7\u02c9\5\u008cG")
        buf.write("\2\u02b8\u02c9\5\u009eP\2\u02b9\u02c9\5\u00a0Q\2\u02ba")
        buf.write("\u02c9\5\u00a6T\2\u02bb\u02bc\7\5\2\2\u02bc\u02bd\5V,")
        buf.write("\2\u02bd\u02be\7\6\2\2\u02be\u02c9\3\2\2\2\u02bf\u02c0")
        buf.write("\7 \2\2\u02c0\u02c1\5\u00e4s\2\u02c1\u02c2\7!\2\2\u02c2")
        buf.write("\u02c9\3\2\2\2\u02c3\u02c9\5\u00be`\2\u02c4\u02c9\5\u00c4")
        buf.write("c\2\u02c5\u02c9\5\u00caf\2\u02c6\u02c9\5\u00ccg\2\u02c7")
        buf.write("\u02c9\5\u00d6l\2\u02c8\u02b4\3\2\2\2\u02c8\u02b5\3\2")
        buf.write("\2\2\u02c8\u02b6\3\2\2\2\u02c8\u02b7\3\2\2\2\u02c8\u02b8")
        buf.write("\3\2\2\2\u02c8\u02b9\3\2\2\2\u02c8\u02ba\3\2\2\2\u02c8")
        buf.write("\u02bb\3\2\2\2\u02c8\u02bf\3\2\2\2\u02c8\u02c3\3\2\2\2")
        buf.write("\u02c8\u02c4\3\2\2\2\u02c8\u02c5\3\2\2\2\u02c8\u02c6\3")
        buf.write("\2\2\2\u02c8\u02c7\3\2\2\2\u02c9o\3\2\2\2\u02ca\u02cd")
        buf.write("\5r:\2\u02cb\u02cc\7\34\2\2\u02cc\u02ce\5p9\2\u02cd\u02cb")
        buf.write("\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ceq\3\2\2\2\u02cf\u02d3")
        buf.write("\5t;\2\u02d0\u02d1\5\u00f4{\2\u02d1\u02d2\5t;\2\u02d2")
        buf.write("\u02d4\3\2\2\2\u02d3\u02d0\3\2\2\2\u02d3\u02d4\3\2\2\2")
        buf.write("\u02d4s\3\2\2\2\u02d5\u02d9\5v<\2\u02d6\u02d7\5\u00f2")
        buf.write("z\2\u02d7\u02d8\5t;\2\u02d8\u02da\3\2\2\2\u02d9\u02d6")
        buf.write("\3\2\2\2\u02d9\u02da\3\2\2\2\u02dau\3\2\2\2\u02db\u02dc")
        buf.write("\b<\1\2\u02dc\u02dd\5x=\2\u02dd\u02e4\3\2\2\2\u02de\u02df")
        buf.write("\f\4\2\2\u02df\u02e0\5\u00f0y\2\u02e0\u02e1\5x=\2\u02e1")
        buf.write("\u02e3\3\2\2\2\u02e2\u02de\3\2\2\2\u02e3\u02e6\3\2\2\2")
        buf.write("\u02e4\u02e2\3\2\2\2\u02e4\u02e5\3\2\2\2\u02e5w\3\2\2")
        buf.write("\2\u02e6\u02e4\3\2\2\2\u02e7\u02e8\b=\1\2\u02e8\u02e9")
        buf.write("\5z>\2\u02e9\u02f0\3\2\2\2\u02ea\u02eb\f\4\2\2\u02eb\u02ec")
        buf.write("\5\u00eex\2\u02ec\u02ed\5z>\2\u02ed\u02ef\3\2\2\2\u02ee")
        buf.write("\u02ea\3\2\2\2\u02ef\u02f2\3\2\2\2\u02f0\u02ee\3\2\2\2")
        buf.write("\u02f0\u02f1\3\2\2\2\u02f1y\3\2\2\2\u02f2\u02f0\3\2\2")
        buf.write("\2\u02f3\u02f4\5\u00ecw\2\u02f4\u02f5\5z>\2\u02f5\u02f8")
        buf.write("\3\2\2\2\u02f6\u02f8\5|?\2\u02f7\u02f3\3\2\2\2\u02f7\u02f6")
        buf.write("\3\2\2\2\u02f8{\3\2\2\2\u02f9\u02fc\5\u0084C\2\u02fa\u02fc")
        buf.write("\5~@\2\u02fb\u02f9\3\2\2\2\u02fb\u02fa\3\2\2\2\u02fc}")
        buf.write("\3\2\2\2\u02fd\u0300\5\u0086D\2\u02fe\u0300\5\u0080A\2")
        buf.write("\u02ff\u02fd\3\2\2\2\u02ff\u02fe\3\2\2\2\u0300\177\3\2")
        buf.write("\2\2\u0301\u0302\5\u0082B\2\u0302\u0081\3\2\2\2\u0303")
        buf.write("\u030d\5\b\5\2\u0304\u030d\5\u00eav\2\u0305\u030d\5\u0088")
        buf.write("E\2\u0306\u030d\5\u008cG\2\u0307\u030d\5\u00a6T\2\u0308")
        buf.write("\u0309\7\5\2\2\u0309\u030a\5p9\2\u030a\u030b\7\6\2\2\u030b")
        buf.write("\u030d\3\2\2\2\u030c\u0303\3\2\2\2\u030c\u0304\3\2\2\2")
        buf.write("\u030c\u0305\3\2\2\2\u030c\u0306\3\2\2\2\u030c\u0307\3")
        buf.write("\2\2\2\u030c\u0308\3\2\2\2\u030d\u0083\3\2\2\2\u030e\u0310")
        buf.write("\bC\1\2\u030f\u0311\5\u0082B\2\u0310\u030f\3\2\2\2\u0310")
        buf.write("\u0311\3\2\2\2\u0311\u0312\3\2\2\2\u0312\u0313\7\23\2")
        buf.write("\2\u0313\u0314\5\u00aaV\2\u0314\u031a\3\2\2\2\u0315\u0316")
        buf.write("\f\3\2\2\u0316\u0317\7\23\2\2\u0317\u0319\5\u00aaV\2\u0318")
        buf.write("\u0315\3\2\2\2\u0319\u031c\3\2\2\2\u031a\u0318\3\2\2\2")
        buf.write("\u031a\u031b\3\2\2\2\u031b\u0085\3\2\2\2\u031c\u031a\3")
        buf.write("\2\2\2\u031d\u031e\7\23\2\2\u031e\u0322\5\6\4\2\u031f")
        buf.write("\u0320\7\3\2\2\u0320\u0323\5\6\4\2\u0321\u0323\5\u00b6")
        buf.write("\\\2\u0322\u031f\3\2\2\2\u0322\u0321\3\2\2\2\u0323\u0087")
        buf.write("\3\2\2\2\u0324\u0325\7\20\2\2\u0325\u032b\7\21\2\2\u0326")
        buf.write("\u0327\7\20\2\2\u0327\u0328\5V,\2\u0328\u0329\5\u008a")
        buf.write("F\2\u0329\u032b\3\2\2\2\u032a\u0324\3\2\2\2\u032a\u0326")
        buf.write("\3\2\2\2\u032b\u0089\3\2\2\2\u032c\u0336\7\21\2\2\u032d")
        buf.write("\u032e\7\16\2\2\u032e\u032f\5V,\2\u032f\u0330\7\21\2\2")
        buf.write("\u0330\u0336\3\2\2\2\u0331\u0332\7\b\2\2\u0332\u0333\5")
        buf.write("V,\2\u0333\u0334\5\u008aF\2\u0334\u0336\3\2\2\2\u0335")
        buf.write("\u032c\3\2\2\2\u0335\u032d\3\2\2\2\u0335\u0331\3\2\2\2")
        buf.write("\u0336\u008b\3\2\2\2\u0337\u0338\7\30\2\2\u0338\u033e")
        buf.write("\7\31\2\2\u0339\u033a\7\30\2\2\u033a\u033b\5\u008eH\2")
        buf.write("\u033b\u033c\7\31\2\2\u033c\u033e\3\2\2\2\u033d\u0337")
        buf.write("\3\2\2\2\u033d\u0339\3\2\2\2\u033e\u008d\3\2\2\2\u033f")
        buf.write("\u0344\5\u0090I\2\u0340\u0341\7\b\2\2\u0341\u0343\5\u0090")
        buf.write("I\2\u0342\u0340\3\2\2\2\u0343\u0346\3\2\2\2\u0344\u0342")
        buf.write("\3\2\2\2\u0344\u0345\3\2\2\2\u0345\u008f\3\2\2\2\u0346")
        buf.write("\u0344\3\2\2\2\u0347\u0348\5\u0092J\2\u0348\u0349\5\u0094")
        buf.write("K\2\u0349\u034a\5\u0096L\2\u034a\u0091\3\2\2\2\u034b\u034d")
        buf.write("\5\u00ecw\2\u034c\u034b\3\2\2\2\u034c\u034d\3\2\2\2\u034d")
        buf.write("\u034e\3\2\2\2\u034e\u034f\5n8\2\u034f\u0093\3\2\2\2\u0350")
        buf.write("\u0351\7\7\2\2\u0351\u0353\5\u009cO\2\u0352\u0350\3\2")
        buf.write("\2\2\u0352\u0353\3\2\2\2\u0353\u0095\3\2\2\2\u0354\u0355")
        buf.write("\7\"\2\2\u0355\u0357\5\u0098M\2\u0356\u0354\3\2\2\2\u0356")
        buf.write("\u0357\3\2\2\2\u0357\u0097\3\2\2\2\u0358\u035d\5\u009a")
        buf.write("N\2\u0359\u035a\7\4\2\2\u035a\u035c\5\u009aN\2\u035b\u0359")
        buf.write("\3\2\2\2\u035c\u035f\3\2\2\2\u035d\u035b\3\2\2\2\u035d")
        buf.write("\u035e\3\2\2\2\u035e\u0099\3\2\2\2\u035f\u035d\3\2\2\2")
        buf.write("\u0360\u0363\5\6\4\2\u0361\u0362\7\7\2\2\u0362\u0364\5")
        buf.write("\f\7\2\u0363\u0361\3\2\2\2\u0363\u0364\3\2\2\2\u0364\u009b")
        buf.write("\3\2\2\2\u0365\u0366\5n8\2\u0366\u009d\3\2\2\2\u0367\u0368")
        buf.write("\7\20\2\2\u0368\u0369\5V,\2\u0369\u036a\7#\2\2\u036a\u036b")
        buf.write("\5\u00a2R\2\u036b\u036c\7\21\2\2\u036c\u009f\3\2\2\2\u036d")
        buf.write("\u036e\7\30\2\2\u036e\u036f\5n8\2\u036f\u0370\7#\2\2\u0370")
        buf.write("\u0371\5\u00a2R\2\u0371\u0372\7\31\2\2\u0372\u00a1\3\2")
        buf.write("\2\2\u0373\u0378\5\u00a4S\2\u0374\u0375\7\b\2\2\u0375")
        buf.write("\u0377\5\u00a4S\2\u0376\u0374\3\2\2\2\u0377\u037a\3\2")
        buf.write("\2\2\u0378\u0376\3\2\2\2\u0378\u0379\3\2\2\2\u0379\u00a3")
        buf.write("\3\2\2\2\u037a\u0378\3\2\2\2\u037b\u0385\5V,\2\u037c\u037d")
        buf.write("\5V,\2\u037d\u037e\7$\2\2\u037e\u037f\5V,\2\u037f\u0385")
        buf.write("\3\2\2\2\u0380\u0381\5\u008cG\2\u0381\u0382\7%\2\2\u0382")
        buf.write("\u0383\5V,\2\u0383\u0385\3\2\2\2\u0384\u037b\3\2\2\2\u0384")
        buf.write("\u037c\3\2\2\2\u0384\u0380\3\2\2\2\u0385\u00a5\3\2\2\2")
        buf.write("\u0386\u0388\7\n\2\2\u0387\u0389\5\u00e4s\2\u0388\u0387")
        buf.write("\3\2\2\2\u0388\u0389\3\2\2\2\u0389\u038a\3\2\2\2\u038a")
        buf.write("\u038b\7\13\2\2\u038b\u00a7\3\2\2\2\u038c\u038e\bU\1\2")
        buf.write("\u038d\u038f\5n8\2\u038e\u038d\3\2\2\2\u038e\u038f\3\2")
        buf.write("\2\2\u038f\u0390\3\2\2\2\u0390\u0391\7\23\2\2\u0391\u0392")
        buf.write("\5\u00aaV\2\u0392\u0398\3\2\2\2\u0393\u0394\f\3\2\2\u0394")
        buf.write("\u0395\7\23\2\2\u0395\u0397\5\u00aaV\2\u0396\u0393\3\2")
        buf.write("\2\2\u0397\u039a\3\2\2\2\u0398\u0396\3\2\2\2\u0398\u0399")
        buf.write("\3\2\2\2\u0399\u00a9\3\2\2\2\u039a\u0398\3\2\2\2\u039b")
        buf.write("\u03a4\7\n\2\2\u039c\u03a1\5\u00acW\2\u039d\u039e\7\b")
        buf.write("\2\2\u039e\u03a0\5\u00acW\2\u039f\u039d\3\2\2\2\u03a0")
        buf.write("\u03a3\3\2\2\2\u03a1\u039f\3\2\2\2\u03a1\u03a2\3\2\2\2")
        buf.write("\u03a2\u03a5\3\2\2\2\u03a3\u03a1\3\2\2\2\u03a4\u039c\3")
        buf.write("\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03a6\3\2\2\2\u03a6\u03a7")
        buf.write("\7\13\2\2\u03a7\u00ab\3\2\2\2\u03a8\u03ab\5\u00aeX\2\u03a9")
        buf.write("\u03ab\5\u00b0Y\2\u03aa\u03a8\3\2\2\2\u03aa\u03a9\3\2")
        buf.write("\2\2\u03ab\u00ad\3\2\2\2\u03ac\u03ad\5\u00b2Z\2\u03ad")
        buf.write("\u03ae\7\26\2\2\u03ae\u03af\5V,\2\u03af\u00af\3\2\2\2")
        buf.write("\u03b0\u03b1\5\u00b2Z\2\u03b1\u03b2\7\27\2\2\u03b2\u03b3")
        buf.write("\5V,\2\u03b3\u00b1\3\2\2\2\u03b4\u03b5\5V,\2\u03b5\u00b3")
        buf.write("\3\2\2\2\u03b6\u03b8\b[\1\2\u03b7\u03b9\5n8\2\u03b8\u03b7")
        buf.write("\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9\u03ba\3\2\2\2\u03ba")
        buf.write("\u03bb\7\23\2\2\u03bb\u03bf\5\6\4\2\u03bc\u03bd\7\3\2")
        buf.write("\2\u03bd\u03c0\5\6\4\2\u03be\u03c0\5\u00b6\\\2\u03bf\u03bc")
        buf.write("\3\2\2\2\u03bf\u03be\3\2\2\2\u03c0\u03cb\3\2\2\2\u03c1")
        buf.write("\u03c2\f\3\2\2\u03c2\u03c3\7\23\2\2\u03c3\u03c7\5\6\4")
        buf.write("\2\u03c4\u03c5\7\3\2\2\u03c5\u03c8\5\6\4\2\u03c6\u03c8")
        buf.write("\5\u00b6\\\2\u03c7\u03c4\3\2\2\2\u03c7\u03c6\3\2\2\2\u03c8")
        buf.write("\u03ca\3\2\2\2\u03c9\u03c1\3\2\2\2\u03ca\u03cd\3\2\2\2")
        buf.write("\u03cb\u03c9\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u00b5\3")
        buf.write("\2\2\2\u03cd\u03cb\3\2\2\2\u03ce\u03d0\7\n\2\2\u03cf\u03d1")
        buf.write("\5\u00b8]\2\u03d0\u03cf\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1")
        buf.write("\u03d2\3\2\2\2\u03d2\u03d3\7\13\2\2\u03d3\u00b7\3\2\2")
        buf.write("\2\u03d4\u03d9\5\u00ba^\2\u03d5\u03d6\7\b\2\2\u03d6\u03d8")
        buf.write("\5\u00ba^\2\u03d7\u03d5\3\2\2\2\u03d8\u03db\3\2\2\2\u03d9")
        buf.write("\u03d7\3\2\2\2\u03d9\u03da\3\2\2\2\u03da\u00b9\3\2\2\2")
        buf.write("\u03db\u03d9\3\2\2\2\u03dc\u03df\5\b\5\2\u03dd\u03df\5")
        buf.write("\6\4\2\u03de\u03dc\3\2\2\2\u03de\u03dd\3\2\2\2\u03df\u03e0")
        buf.write("\3\2\2\2\u03e0\u03e1\7\34\2\2\u03e1\u03e2\5V,\2\u03e2")
        buf.write("\u00bb\3\2\2\2\u03e3\u03e4\5l\67\2\u03e4\u03e5\5\u00e0")
        buf.write("q\2\u03e5\u00bd\3\2\2\2\u03e6\u03e7\7&\2\2\u03e7\u03e8")
        buf.write("\5\u00c0a\2\u03e8\u03e9\7!\2\2\u03e9\u00bf\3\2\2\2\u03ea")
        buf.write("\u03ef\5\u00c2b\2\u03eb\u03ec\7\f\2\2\u03ec\u03ee\5\u00c2")
        buf.write("b\2\u03ed\u03eb\3\2\2\2\u03ee\u03f1\3\2\2\2\u03ef\u03ed")
        buf.write("\3\2\2\2\u03ef\u03f0\3\2\2\2\u03f0\u00c1\3\2\2\2\u03f1")
        buf.write("\u03ef\3\2\2\2\u03f2\u03f3\5\u00e8u\2\u03f3\u03f4\5T+")
        buf.write("\2\u03f4\u00c3\3\2\2\2\u03f5\u03f6\7\'\2\2\u03f6\u03f7")
        buf.write("\5V,\2\u03f7\u03f8\7(\2\2\u03f8\u03f9\5\u00c6d\2\u03f9")
        buf.write("\u03fa\7!\2\2\u03fa\u00c5\3\2\2\2\u03fb\u0400\5\u00c8")
        buf.write("e\2\u03fc\u03fd\7\f\2\2\u03fd\u03ff\5\u00c8e\2\u03fe\u03fc")
        buf.write("\3\2\2\2\u03ff\u0402\3\2\2\2\u0400\u03fe\3\2\2\2\u0400")
        buf.write("\u0401\3\2\2\2\u0401\u00c7\3\2\2\2\u0402\u0400\3\2\2\2")
        buf.write("\u0403\u0404\5V,\2\u0404\u0405\5R*\2\u0405\u0406\5T+\2")
        buf.write("\u0406\u00c9\3\2\2\2\u0407\u0408\7)\2\2\u0408\u0409\5")
        buf.write("\u00c6d\2\u0409\u040a\7!\2\2\u040a\u0419\3\2\2\2\u040b")
        buf.write("\u040c\7)\2\2\u040c\u040d\7*\2\2\u040d\u040e\5V,\2\u040e")
        buf.write("\u040f\5T+\2\u040f\u0410\7!\2\2\u0410\u0419\3\2\2\2\u0411")
        buf.write("\u0412\7)\2\2\u0412\u0413\5\u00c6d\2\u0413\u0414\7*\2")
        buf.write("\2\u0414\u0415\5V,\2\u0415\u0416\5T+\2\u0416\u0417\7!")
        buf.write("\2\2\u0417\u0419\3\2\2\2\u0418\u0407\3\2\2\2\u0418\u040b")
        buf.write("\3\2\2\2\u0418\u0411\3\2\2\2\u0419\u00cb\3\2\2\2\u041a")
        buf.write("\u041b\7\24\2\2\u041b\u041c\5\6\4\2\u041c\u041d\7\"\2")
        buf.write("\2\u041d\u041e\5\f\7\2\u041e\u042b\3\2\2\2\u041f\u0420")
        buf.write("\7\24\2\2\u0420\u0421\5\u00ceh\2\u0421\u0422\7\7\2\2\u0422")
        buf.write("\u0423\5\u00ceh\2\u0423\u0424\7\"\2\2\u0424\u0425\5\u00d0")
        buf.write("i\2\u0425\u042b\3\2\2\2\u0426\u0427\7\24\2\2\u0427\u0428")
        buf.write("\5\u00d2j\2\u0428\u0429\7!\2\2\u0429\u042b\3\2\2\2\u042a")
        buf.write("\u041a\3\2\2\2\u042a\u041f\3\2\2\2\u042a\u0426\3\2\2\2")
        buf.write("\u042b\u00cd\3\2\2\2\u042c\u042f\5\6\4\2\u042d\u042f\5")
        buf.write("\b\5\2\u042e\u042c\3\2\2\2\u042e\u042d\3\2\2\2\u042f\u00cf")
        buf.write("\3\2\2\2\u0430\u0433\5\f\7\2\u0431\u0433\5\b\5\2\u0432")
        buf.write("\u0430\3\2\2\2\u0432\u0431\3\2\2\2\u0433\u00d1\3\2\2\2")
        buf.write("\u0434\u0439\5\u00d4k\2\u0435\u0436\7\f\2\2\u0436\u0438")
        buf.write("\5\u00d4k\2\u0437\u0435\3\2\2\2\u0438\u043b\3\2\2\2\u0439")
        buf.write("\u0437\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u00d3\3\2\2\2")
        buf.write("\u043b\u0439\3\2\2\2\u043c\u043d\5\u00e2r\2\u043d\u043e")
        buf.write("\5R*\2\u043e\u043f\5T+\2\u043f\u0446\3\2\2\2\u0440\u0441")
        buf.write("\5\b\5\2\u0441\u0442\5\u00e2r\2\u0442\u0443\5R*\2\u0443")
        buf.write("\u0444\5T+\2\u0444\u0446\3\2\2\2\u0445\u043c\3\2\2\2\u0445")
        buf.write("\u0440\3\2\2\2\u0446\u00d5\3\2\2\2\u0447\u0448\7+\2\2")
        buf.write("\u0448\u044b\5\u00e4s\2\u0449\u044a\7(\2\2\u044a\u044c")
        buf.write("\5\u00c6d\2\u044b\u0449\3\2\2\2\u044b\u044c\3\2\2\2\u044c")
        buf.write("\u044d\3\2\2\2\u044d\u044e\5\u00d8m\2\u044e\u00d7\3\2")
        buf.write("\2\2\u044f\u0450\7\33\2\2\u0450\u0451\5\u00dan\2\u0451")
        buf.write("\u0452\7!\2\2\u0452\u045e\3\2\2\2\u0453\u0454\7\33\2\2")
        buf.write("\u0454\u0455\5\u00dan\2\u0455\u0456\7*\2\2\u0456\u0457")
        buf.write("\5\u00e4s\2\u0457\u0458\7!\2\2\u0458\u045e\3\2\2\2\u0459")
        buf.write("\u045a\7*\2\2\u045a\u045b\5\u00e4s\2\u045b\u045c\7!\2")
        buf.write("\2\u045c\u045e\3\2\2\2\u045d\u044f\3\2\2\2\u045d\u0453")
        buf.write("\3\2\2\2\u045d\u0459\3\2\2\2\u045e\u00d9\3\2\2\2\u045f")
        buf.write("\u0464\5\u00dco\2\u0460\u0461\7\f\2\2\u0461\u0463\5\u00dc")
        buf.write("o\2\u0462\u0460\3\2\2\2\u0463\u0466\3\2\2\2\u0464\u0462")
        buf.write("\3\2\2\2\u0464\u0465\3\2\2\2\u0465\u00db\3\2\2\2\u0466")
        buf.write("\u0464\3\2\2\2\u0467\u0468\5V,\2\u0468\u0469\5R*\2\u0469")
        buf.write("\u046a\5T+\2\u046a\u0476\3\2\2\2\u046b\u046c\5\u00ceh")
        buf.write("\2\u046c\u046d\7\7\2\2\u046d\u046f\3\2\2\2\u046e\u046b")
        buf.write("\3\2\2\2\u046e\u046f\3\2\2\2\u046f\u0470\3\2\2\2\u0470")
        buf.write("\u0471\5p9\2\u0471\u0472\5\u00dep\2\u0472\u0473\5R*\2")
        buf.write("\u0473\u0474\5T+\2\u0474\u0476\3\2\2\2\u0475\u0467\3\2")
        buf.write("\2\2\u0475\u046e\3\2\2\2\u0476\u00dd\3\2\2\2\u0477\u0478")
        buf.write("\7\7\2\2\u0478\u047a\5\b\5\2\u0479\u0477\3\2\2\2\u0479")
        buf.write("\u047a\3\2\2\2\u047a\u00df\3\2\2\2\u047b\u047d\7\5\2\2")
        buf.write("\u047c\u047e\5\u00e4s\2\u047d\u047c\3\2\2\2\u047d\u047e")
        buf.write("\3\2\2\2\u047e\u047f\3\2\2\2\u047f\u0480\7\6\2\2\u0480")
        buf.write("\u00e1\3\2\2\2\u0481\u0483\7\5\2\2\u0482\u0484\5\u00e6")
        buf.write("t\2\u0483\u0482\3\2\2\2\u0483\u0484\3\2\2\2\u0484\u0485")
        buf.write("\3\2\2\2\u0485\u0486\7\6\2\2\u0486\u00e3\3\2\2\2\u0487")
        buf.write("\u048c\5V,\2\u0488\u0489\7\b\2\2\u0489\u048b\5V,\2\u048a")
        buf.write("\u0488\3\2\2\2\u048b\u048e\3\2\2\2\u048c\u048a\3\2\2\2")
        buf.write("\u048c\u048d\3\2\2\2\u048d\u00e5\3\2\2\2\u048e\u048c\3")
        buf.write("\2\2\2\u048f\u0494\5p9\2\u0490\u0491\7\b\2\2\u0491\u0493")
        buf.write("\5p9\2\u0492\u0490\3\2\2\2\u0493\u0496\3\2\2\2\u0494\u0492")
        buf.write("\3\2\2\2\u0494\u0495\3\2\2\2\u0495\u00e7\3\2\2\2\u0496")
        buf.write("\u0494\3\2\2\2\u0497\u049c\5\u00e4s\2\u0498\u0499\7\f")
        buf.write("\2\2\u0499\u049b\5\u00e4s\2\u049a\u0498\3\2\2\2\u049b")
        buf.write("\u049e\3\2\2\2\u049c\u049a\3\2\2\2\u049c\u049d\3\2\2\2")
        buf.write("\u049d\u00e9\3\2\2\2\u049e\u049c\3\2\2\2\u049f\u04a9\5")
        buf.write("\16\b\2\u04a0\u04a9\5\f\7\2\u04a1\u04a9\5\n\6\2\u04a2")
        buf.write("\u04a9\5\6\4\2\u04a3\u04a5\5\20\t\2\u04a4\u04a3\3\2\2")
        buf.write("\2\u04a5\u04a6\3\2\2\2\u04a6\u04a4\3\2\2\2\u04a6\u04a7")
        buf.write("\3\2\2\2\u04a7\u04a9\3\2\2\2\u04a8\u049f\3\2\2\2\u04a8")
        buf.write("\u04a0\3\2\2\2\u04a8\u04a1\3\2\2\2\u04a8\u04a2\3\2\2\2")
        buf.write("\u04a8\u04a4\3\2\2\2\u04a9\u00eb\3\2\2\2\u04aa\u04ab\t")
        buf.write("\4\2\2\u04ab\u00ed\3\2\2\2\u04ac\u04ad\t\5\2\2\u04ad\u00ef")
        buf.write("\3\2\2\2\u04ae\u04af\t\6\2\2\u04af\u00f1\3\2\2\2\u04b0")
        buf.write("\u04b1\t\7\2\2\u04b1\u00f3\3\2\2\2\u04b2\u04b3\t\b\2\2")
        buf.write("\u04b3\u00f5\3\2\2\2c\u00f9\u00ff\u011f\u0129\u0130\u013a")
        buf.write("\u014d\u0158\u015e\u0165\u0171\u0178\u017e\u0185\u018a")
        buf.write("\u0195\u01a1\u01a5\u01f5\u01fd\u0201\u020c\u0218\u022f")
        buf.write("\u024a\u0251\u025d\u0265\u026c\u0274\u027c\u0283\u028b")
        buf.write("\u0294\u029d\u02a4\u02a8\u02ad\u02b2\u02c8\u02cd\u02d3")
        buf.write("\u02d9\u02e4\u02f0\u02f7\u02fb\u02ff\u030c\u0310\u031a")
        buf.write("\u0322\u032a\u0335\u033d\u0344\u034c\u0352\u0356\u035d")
        buf.write("\u0363\u0378\u0384\u0388\u038e\u0398\u03a1\u03a4\u03aa")
        buf.write("\u03b8\u03bf\u03c7\u03cb\u03d0\u03d9\u03de\u03ef\u0400")
        buf.write("\u0418\u042a\u042e\u0432\u0439\u0445\u044b\u045d\u0464")
        buf.write("\u046e\u0475\u0479\u047d\u0483\u048c\u0494\u049c\u04a6")
        buf.write("\u04a8")
        return buf.getvalue()


class ErlangParser ( Parser ):

    grammarFileName = "Erlang.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "'-'", "'('", "')'", "':'", "','", 
                     "'::'", "'{'", "'}'", "';'", "'when'", "'|'", "'..'", 
                     "'['", "']'", "'...'", "'#'", "'fun'", "'->'", "'=>'", 
                     "':='", "'<<'", "'>>'", "'*'", "'catch'", "'='", "'!'", 
                     "'orelse'", "'andalso'", "'begin'", "'end'", "'/'", 
                     "'||'", "'<-'", "'<='", "'if'", "'case'", "'of'", "'receive'", 
                     "'after'", "'try'", "'+'", "'bnot'", "'not'", "'div'", 
                     "'rem'", "'band'", "'and'", "'bor'", "'bxor'", "'bsl'", 
                     "'bsr'", "'or'", "'xor'", "'++'", "'--'", "'=='", "'/='", 
                     "'=<'", "'<'", "'>='", "'>'", "'=:='", "'=/='" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "TokAtom", "TokVar", "TokFloat", "TokInteger", 
                      "TokChar", "TokString", "AttrName", "Comment", "WS" ]

    RULE_forms = 0
    RULE_form = 1
    RULE_tokAtom = 2
    RULE_tokVar = 3
    RULE_tokFloat = 4
    RULE_tokInteger = 5
    RULE_tokChar = 6
    RULE_tokString = 7
    RULE_attribute = 8
    RULE_typeSpec = 9
    RULE_specFun = 10
    RULE_typedAttrVal = 11
    RULE_typedRecordFields = 12
    RULE_typedExprs = 13
    RULE_typedExpr = 14
    RULE_typeSigs = 15
    RULE_typeSig = 16
    RULE_typeGuards = 17
    RULE_typeGuard = 18
    RULE_topTypes = 19
    RULE_topType = 20
    RULE_topType100 = 21
    RULE_type200 = 22
    RULE_type300 = 23
    RULE_type400 = 24
    RULE_type500 = 25
    RULE_re_type = 26
    RULE_funType100 = 27
    RULE_funType = 28
    RULE_mapPairTypes = 29
    RULE_mapPairType = 30
    RULE_fieldTypes = 31
    RULE_fieldType = 32
    RULE_binaryType = 33
    RULE_binBaseType = 34
    RULE_binUnitType = 35
    RULE_attrVal = 36
    RULE_function_ = 37
    RULE_functionClause = 38
    RULE_clauseArgs = 39
    RULE_clauseGuard = 40
    RULE_clauseBody = 41
    RULE_expr = 42
    RULE_expr100 = 43
    RULE_expr150 = 44
    RULE_expr160 = 45
    RULE_expr200 = 46
    RULE_expr300 = 47
    RULE_expr400 = 48
    RULE_expr500 = 49
    RULE_expr600 = 50
    RULE_expr650 = 51
    RULE_expr700 = 52
    RULE_expr800 = 53
    RULE_exprMax = 54
    RULE_patExpr = 55
    RULE_patExpr200 = 56
    RULE_patExpr300 = 57
    RULE_patExpr400 = 58
    RULE_patExpr500 = 59
    RULE_patExpr600 = 60
    RULE_patExpr650 = 61
    RULE_patExpr700 = 62
    RULE_patExpr800 = 63
    RULE_patExprMax = 64
    RULE_mapPatExpr = 65
    RULE_recordPatExpr = 66
    RULE_re_list = 67
    RULE_tail = 68
    RULE_binary = 69
    RULE_binElements = 70
    RULE_binElement = 71
    RULE_bitExpr = 72
    RULE_optBitSizeExpr = 73
    RULE_optBitTypeList = 74
    RULE_bitTypeList = 75
    RULE_bitType = 76
    RULE_bitSizeExpr = 77
    RULE_listComprehension = 78
    RULE_binaryComprehension = 79
    RULE_lcExprs = 80
    RULE_lcExpr = 81
    RULE_re_tuple = 82
    RULE_mapExpr = 83
    RULE_mapTuple = 84
    RULE_mapField = 85
    RULE_mapFieldAssoc = 86
    RULE_mapFieldExact = 87
    RULE_mapKey = 88
    RULE_recordExpr = 89
    RULE_recordTuple = 90
    RULE_recordFields = 91
    RULE_recordField = 92
    RULE_functionCall = 93
    RULE_ifExpr = 94
    RULE_ifClauses = 95
    RULE_ifClause = 96
    RULE_caseExpr = 97
    RULE_crClauses = 98
    RULE_crClause = 99
    RULE_receiveExpr = 100
    RULE_funExpr = 101
    RULE_atomOrVar = 102
    RULE_integerOrVar = 103
    RULE_funClauses = 104
    RULE_funClause = 105
    RULE_tryExpr = 106
    RULE_tryCatch = 107
    RULE_tryClauses = 108
    RULE_tryClause = 109
    RULE_tryOptStackTrace = 110
    RULE_argumentList = 111
    RULE_patArgumentList = 112
    RULE_exprs = 113
    RULE_patExprs = 114
    RULE_guard = 115
    RULE_atomic = 116
    RULE_prefixOp = 117
    RULE_multOp = 118
    RULE_addOp = 119
    RULE_listOp = 120
    RULE_compOp = 121

    ruleNames =  [ "forms", "form", "tokAtom", "tokVar", "tokFloat", "tokInteger", 
                   "tokChar", "tokString", "attribute", "typeSpec", "specFun", 
                   "typedAttrVal", "typedRecordFields", "typedExprs", "typedExpr", 
                   "typeSigs", "typeSig", "typeGuards", "typeGuard", "topTypes", 
                   "topType", "topType100", "type200", "type300", "type400", 
                   "type500", "re_type", "funType100", "funType", "mapPairTypes", 
                   "mapPairType", "fieldTypes", "fieldType", "binaryType", 
                   "binBaseType", "binUnitType", "attrVal", "function_", 
                   "functionClause", "clauseArgs", "clauseGuard", "clauseBody", 
                   "expr", "expr100", "expr150", "expr160", "expr200", "expr300", 
                   "expr400", "expr500", "expr600", "expr650", "expr700", 
                   "expr800", "exprMax", "patExpr", "patExpr200", "patExpr300", 
                   "patExpr400", "patExpr500", "patExpr600", "patExpr650", 
                   "patExpr700", "patExpr800", "patExprMax", "mapPatExpr", 
                   "recordPatExpr", "re_list", "tail", "binary", "binElements", 
                   "binElement", "bitExpr", "optBitSizeExpr", "optBitTypeList", 
                   "bitTypeList", "bitType", "bitSizeExpr", "listComprehension", 
                   "binaryComprehension", "lcExprs", "lcExpr", "re_tuple", 
                   "mapExpr", "mapTuple", "mapField", "mapFieldAssoc", "mapFieldExact", 
                   "mapKey", "recordExpr", "recordTuple", "recordFields", 
                   "recordField", "functionCall", "ifExpr", "ifClauses", 
                   "ifClause", "caseExpr", "crClauses", "crClause", "receiveExpr", 
                   "funExpr", "atomOrVar", "integerOrVar", "funClauses", 
                   "funClause", "tryExpr", "tryCatch", "tryClauses", "tryClause", 
                   "tryOptStackTrace", "argumentList", "patArgumentList", 
                   "exprs", "patExprs", "guard", "atomic", "prefixOp", "multOp", 
                   "addOp", "listOp", "compOp" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    TokAtom=65
    TokVar=66
    TokFloat=67
    TokInteger=68
    TokChar=69
    TokString=70
    AttrName=71
    Comment=72
    WS=73

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.3")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class FormsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(ErlangParser.EOF, 0)

        def form(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.FormContext)
            else:
                return self.getTypedRuleContext(ErlangParser.FormContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_forms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForms" ):
                listener.enterForms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForms" ):
                listener.exitForms(self)




    def forms(self):

        localctx = ErlangParser.FormsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_forms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 244
                self.form()
                self.state = 247 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ErlangParser.T__1 or _la==ErlangParser.TokAtom or _la==ErlangParser.AttrName):
                    break

            self.state = 249
            self.match(ErlangParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self):
            return self.getTypedRuleContext(ErlangParser.AttributeContext,0)


        def function_(self):
            return self.getTypedRuleContext(ErlangParser.Function_Context,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_form

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForm" ):
                listener.enterForm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForm" ):
                listener.exitForm(self)




    def form(self):

        localctx = ErlangParser.FormContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_form)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ErlangParser.T__1, ErlangParser.AttrName]:
                self.state = 251
                self.attribute()
                pass
            elif token in [ErlangParser.TokAtom]:
                self.state = 252
                self.function_()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 255
            self.match(ErlangParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TokAtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TokAtom(self):
            return self.getToken(ErlangParser.TokAtom, 0)

        def getRuleIndex(self):
            return ErlangParser.RULE_tokAtom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTokAtom" ):
                listener.enterTokAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTokAtom" ):
                listener.exitTokAtom(self)




    def tokAtom(self):

        localctx = ErlangParser.TokAtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_tokAtom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            self.match(ErlangParser.TokAtom)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TokVarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TokVar(self):
            return self.getToken(ErlangParser.TokVar, 0)

        def getRuleIndex(self):
            return ErlangParser.RULE_tokVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTokVar" ):
                listener.enterTokVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTokVar" ):
                listener.exitTokVar(self)




    def tokVar(self):

        localctx = ErlangParser.TokVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_tokVar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self.match(ErlangParser.TokVar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TokFloatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TokFloat(self):
            return self.getToken(ErlangParser.TokFloat, 0)

        def getRuleIndex(self):
            return ErlangParser.RULE_tokFloat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTokFloat" ):
                listener.enterTokFloat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTokFloat" ):
                listener.exitTokFloat(self)




    def tokFloat(self):

        localctx = ErlangParser.TokFloatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_tokFloat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            self.match(ErlangParser.TokFloat)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TokIntegerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TokInteger(self):
            return self.getToken(ErlangParser.TokInteger, 0)

        def getRuleIndex(self):
            return ErlangParser.RULE_tokInteger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTokInteger" ):
                listener.enterTokInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTokInteger" ):
                listener.exitTokInteger(self)




    def tokInteger(self):

        localctx = ErlangParser.TokIntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_tokInteger)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self.match(ErlangParser.TokInteger)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TokCharContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TokChar(self):
            return self.getToken(ErlangParser.TokChar, 0)

        def getRuleIndex(self):
            return ErlangParser.RULE_tokChar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTokChar" ):
                listener.enterTokChar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTokChar" ):
                listener.exitTokChar(self)




    def tokChar(self):

        localctx = ErlangParser.TokCharContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_tokChar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self.match(ErlangParser.TokChar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TokStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TokString(self):
            return self.getToken(ErlangParser.TokString, 0)

        def getRuleIndex(self):
            return ErlangParser.RULE_tokString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTokString" ):
                listener.enterTokString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTokString" ):
                listener.exitTokString(self)




    def tokString(self):

        localctx = ErlangParser.TokStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_tokString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.match(ErlangParser.TokString)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokAtom(self):
            return self.getTypedRuleContext(ErlangParser.TokAtomContext,0)


        def attrVal(self):
            return self.getTypedRuleContext(ErlangParser.AttrValContext,0)


        def typedAttrVal(self):
            return self.getTypedRuleContext(ErlangParser.TypedAttrValContext,0)


        def AttrName(self):
            return self.getToken(ErlangParser.AttrName, 0)

        def typeSpec(self):
            return self.getTypedRuleContext(ErlangParser.TypeSpecContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = ErlangParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_attribute)
        try:
            self.state = 285
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 269
                self.match(ErlangParser.T__1)
                self.state = 270
                self.tokAtom()
                self.state = 271
                self.attrVal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 273
                self.match(ErlangParser.T__1)
                self.state = 274
                self.tokAtom()
                self.state = 275
                self.typedAttrVal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 277
                self.match(ErlangParser.T__1)
                self.state = 278
                self.tokAtom()
                self.state = 279
                self.match(ErlangParser.T__2)
                self.state = 280
                self.typedAttrVal()
                self.state = 281
                self.match(ErlangParser.T__3)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 283
                self.match(ErlangParser.AttrName)
                self.state = 284
                self.typeSpec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specFun(self):
            return self.getTypedRuleContext(ErlangParser.SpecFunContext,0)


        def typeSigs(self):
            return self.getTypedRuleContext(ErlangParser.TypeSigsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_typeSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpec" ):
                listener.enterTypeSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpec" ):
                listener.exitTypeSpec(self)




    def typeSpec(self):

        localctx = ErlangParser.TypeSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typeSpec)
        try:
            self.state = 295
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ErlangParser.TokAtom]:
                self.enterOuterAlt(localctx, 1)
                self.state = 287
                self.specFun()
                self.state = 288
                self.typeSigs()
                pass
            elif token in [ErlangParser.T__2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 290
                self.match(ErlangParser.T__2)
                self.state = 291
                self.specFun()
                self.state = 292
                self.typeSigs()
                self.state = 293
                self.match(ErlangParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecFunContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.TokAtomContext)
            else:
                return self.getTypedRuleContext(ErlangParser.TokAtomContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_specFun

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecFun" ):
                listener.enterSpecFun(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecFun" ):
                listener.exitSpecFun(self)




    def specFun(self):

        localctx = ErlangParser.SpecFunContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_specFun)
        try:
            self.state = 302
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 297
                self.tokAtom()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 298
                self.tokAtom()
                self.state = 299
                self.match(ErlangParser.T__4)
                self.state = 300
                self.tokAtom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedAttrValContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def typedRecordFields(self):
            return self.getTypedRuleContext(ErlangParser.TypedRecordFieldsContext,0)


        def topType(self):
            return self.getTypedRuleContext(ErlangParser.TopTypeContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_typedAttrVal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedAttrVal" ):
                listener.enterTypedAttrVal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedAttrVal" ):
                listener.exitTypedAttrVal(self)




    def typedAttrVal(self):

        localctx = ErlangParser.TypedAttrValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_typedAttrVal)
        try:
            self.state = 312
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 304
                self.expr()
                self.state = 305
                self.match(ErlangParser.T__5)
                self.state = 306
                self.typedRecordFields()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 308
                self.expr()
                self.state = 309
                self.match(ErlangParser.T__6)
                self.state = 310
                self.topType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedRecordFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedExprs(self):
            return self.getTypedRuleContext(ErlangParser.TypedExprsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_typedRecordFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedRecordFields" ):
                listener.enterTypedRecordFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedRecordFields" ):
                listener.exitTypedRecordFields(self)




    def typedRecordFields(self):

        localctx = ErlangParser.TypedRecordFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_typedRecordFields)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.match(ErlangParser.T__7)
            self.state = 315
            self.typedExprs()
            self.state = 316
            self.match(ErlangParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedExprsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedExpr(self):
            return self.getTypedRuleContext(ErlangParser.TypedExprContext,0)


        def typedExprs(self):
            return self.getTypedRuleContext(ErlangParser.TypedExprsContext,0)


        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def exprs(self):
            return self.getTypedRuleContext(ErlangParser.ExprsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_typedExprs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedExprs" ):
                listener.enterTypedExprs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedExprs" ):
                listener.exitTypedExprs(self)




    def typedExprs(self):

        localctx = ErlangParser.TypedExprsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_typedExprs)
        try:
            self.state = 331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 318
                self.typedExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 319
                self.typedExpr()
                self.state = 320
                self.match(ErlangParser.T__5)
                self.state = 321
                self.typedExprs()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 323
                self.expr()
                self.state = 324
                self.match(ErlangParser.T__5)
                self.state = 325
                self.typedExprs()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 327
                self.typedExpr()
                self.state = 328
                self.match(ErlangParser.T__5)
                self.state = 329
                self.exprs()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def topType(self):
            return self.getTypedRuleContext(ErlangParser.TopTypeContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_typedExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedExpr" ):
                listener.enterTypedExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedExpr" ):
                listener.exitTypedExpr(self)




    def typedExpr(self):

        localctx = ErlangParser.TypedExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_typedExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.expr()
            self.state = 334
            self.match(ErlangParser.T__6)
            self.state = 335
            self.topType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSigsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSig(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.TypeSigContext)
            else:
                return self.getTypedRuleContext(ErlangParser.TypeSigContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_typeSigs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSigs" ):
                listener.enterTypeSigs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSigs" ):
                listener.exitTypeSigs(self)




    def typeSigs(self):

        localctx = ErlangParser.TypeSigsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_typeSigs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.typeSig()
            self.state = 342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ErlangParser.T__9:
                self.state = 338
                self.match(ErlangParser.T__9)
                self.state = 339
                self.typeSig()
                self.state = 344
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSigContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def funType(self):
            return self.getTypedRuleContext(ErlangParser.FunTypeContext,0)


        def typeGuards(self):
            return self.getTypedRuleContext(ErlangParser.TypeGuardsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_typeSig

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSig" ):
                listener.enterTypeSig(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSig" ):
                listener.exitTypeSig(self)




    def typeSig(self):

        localctx = ErlangParser.TypeSigContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_typeSig)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.funType()
            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ErlangParser.T__10:
                self.state = 346
                self.match(ErlangParser.T__10)
                self.state = 347
                self.typeGuards()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeGuardsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeGuard(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.TypeGuardContext)
            else:
                return self.getTypedRuleContext(ErlangParser.TypeGuardContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_typeGuards

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeGuards" ):
                listener.enterTypeGuards(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeGuards" ):
                listener.exitTypeGuards(self)




    def typeGuards(self):

        localctx = ErlangParser.TypeGuardsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_typeGuards)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 350
            self.typeGuard()
            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ErlangParser.T__5:
                self.state = 351
                self.match(ErlangParser.T__5)
                self.state = 352
                self.typeGuard()
                self.state = 357
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeGuardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokAtom(self):
            return self.getTypedRuleContext(ErlangParser.TokAtomContext,0)


        def topTypes(self):
            return self.getTypedRuleContext(ErlangParser.TopTypesContext,0)


        def tokVar(self):
            return self.getTypedRuleContext(ErlangParser.TokVarContext,0)


        def topType(self):
            return self.getTypedRuleContext(ErlangParser.TopTypeContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_typeGuard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeGuard" ):
                listener.enterTypeGuard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeGuard" ):
                listener.exitTypeGuard(self)




    def typeGuard(self):

        localctx = ErlangParser.TypeGuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_typeGuard)
        try:
            self.state = 367
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ErlangParser.TokAtom]:
                self.enterOuterAlt(localctx, 1)
                self.state = 358
                self.tokAtom()
                self.state = 359
                self.match(ErlangParser.T__2)
                self.state = 360
                self.topTypes()
                self.state = 361
                self.match(ErlangParser.T__3)
                pass
            elif token in [ErlangParser.TokVar]:
                self.enterOuterAlt(localctx, 2)
                self.state = 363
                self.tokVar()
                self.state = 364
                self.match(ErlangParser.T__6)
                self.state = 365
                self.topType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.TopTypeContext)
            else:
                return self.getTypedRuleContext(ErlangParser.TopTypeContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_topTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopTypes" ):
                listener.enterTopTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopTypes" ):
                listener.exitTopTypes(self)




    def topTypes(self):

        localctx = ErlangParser.TopTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_topTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.topType()
            self.state = 374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ErlangParser.T__5:
                self.state = 370
                self.match(ErlangParser.T__5)
                self.state = 371
                self.topType()
                self.state = 376
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topType100(self):
            return self.getTypedRuleContext(ErlangParser.TopType100Context,0)


        def tokVar(self):
            return self.getTypedRuleContext(ErlangParser.TokVarContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_topType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopType" ):
                listener.enterTopType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopType" ):
                listener.exitTopType(self)




    def topType(self):

        localctx = ErlangParser.TopTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_topType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 377
                self.tokVar()
                self.state = 378
                self.match(ErlangParser.T__6)


            self.state = 382
            self.topType100()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopType100Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type200(self):
            return self.getTypedRuleContext(ErlangParser.Type200Context,0)


        def topType100(self):
            return self.getTypedRuleContext(ErlangParser.TopType100Context,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_topType100

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopType100" ):
                listener.enterTopType100(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopType100" ):
                listener.exitTopType100(self)




    def topType100(self):

        localctx = ErlangParser.TopType100Context(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_topType100)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.type200()
            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ErlangParser.T__11:
                self.state = 385
                self.match(ErlangParser.T__11)
                self.state = 386
                self.topType100()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type200Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type300(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.Type300Context)
            else:
                return self.getTypedRuleContext(ErlangParser.Type300Context,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_type200

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType200" ):
                listener.enterType200(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType200" ):
                listener.exitType200(self)




    def type200(self):

        localctx = ErlangParser.Type200Context(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_type200)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.type300(0)
            self.state = 392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ErlangParser.T__12:
                self.state = 390
                self.match(ErlangParser.T__12)
                self.state = 391
                self.type300(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type300Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type400(self):
            return self.getTypedRuleContext(ErlangParser.Type400Context,0)


        def type300(self):
            return self.getTypedRuleContext(ErlangParser.Type300Context,0)


        def addOp(self):
            return self.getTypedRuleContext(ErlangParser.AddOpContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_type300

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType300" ):
                listener.enterType300(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType300" ):
                listener.exitType300(self)



    def type300(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ErlangParser.Type300Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 46
        self.enterRecursionRule(localctx, 46, self.RULE_type300, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self.type400(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 403
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ErlangParser.Type300Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_type300)
                    self.state = 397
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 398
                    self.addOp()
                    self.state = 399
                    self.type400(0) 
                self.state = 405
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Type400Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type500(self):
            return self.getTypedRuleContext(ErlangParser.Type500Context,0)


        def type400(self):
            return self.getTypedRuleContext(ErlangParser.Type400Context,0)


        def multOp(self):
            return self.getTypedRuleContext(ErlangParser.MultOpContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_type400

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType400" ):
                listener.enterType400(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType400" ):
                listener.exitType400(self)



    def type400(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ErlangParser.Type400Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 48
        self.enterRecursionRule(localctx, 48, self.RULE_type400, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.type500()
            self._ctx.stop = self._input.LT(-1)
            self.state = 415
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ErlangParser.Type400Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_type400)
                    self.state = 409
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 410
                    self.multOp()
                    self.state = 411
                    self.type500() 
                self.state = 417
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Type500Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def re_type(self):
            return self.getTypedRuleContext(ErlangParser.Re_typeContext,0)


        def prefixOp(self):
            return self.getTypedRuleContext(ErlangParser.PrefixOpContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_type500

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType500" ):
                listener.enterType500(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType500" ):
                listener.exitType500(self)




    def type500(self):

        localctx = ErlangParser.Type500Context(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_type500)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ErlangParser.T__1) | (1 << ErlangParser.T__41) | (1 << ErlangParser.T__42) | (1 << ErlangParser.T__43))) != 0):
                self.state = 418
                self.prefixOp()


            self.state = 421
            self.re_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Re_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topType(self):
            return self.getTypedRuleContext(ErlangParser.TopTypeContext,0)


        def tokVar(self):
            return self.getTypedRuleContext(ErlangParser.TokVarContext,0)


        def tokAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.TokAtomContext)
            else:
                return self.getTypedRuleContext(ErlangParser.TokAtomContext,i)


        def topTypes(self):
            return self.getTypedRuleContext(ErlangParser.TopTypesContext,0)


        def mapPairTypes(self):
            return self.getTypedRuleContext(ErlangParser.MapPairTypesContext,0)


        def fieldTypes(self):
            return self.getTypedRuleContext(ErlangParser.FieldTypesContext,0)


        def binaryType(self):
            return self.getTypedRuleContext(ErlangParser.BinaryTypeContext,0)


        def tokInteger(self):
            return self.getTypedRuleContext(ErlangParser.TokIntegerContext,0)


        def tokChar(self):
            return self.getTypedRuleContext(ErlangParser.TokCharContext,0)


        def funType100(self):
            return self.getTypedRuleContext(ErlangParser.FunType100Context,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_re_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRe_type" ):
                listener.enterRe_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRe_type" ):
                listener.exitRe_type(self)




    def re_type(self):

        localctx = ErlangParser.Re_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_re_type)
        try:
            self.state = 499
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 423
                self.match(ErlangParser.T__2)
                self.state = 424
                self.topType()
                self.state = 425
                self.match(ErlangParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 427
                self.tokVar()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 428
                self.tokAtom()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 429
                self.tokAtom()
                self.state = 430
                self.match(ErlangParser.T__2)
                self.state = 431
                self.match(ErlangParser.T__3)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 433
                self.tokAtom()
                self.state = 434
                self.match(ErlangParser.T__2)
                self.state = 435
                self.topTypes()
                self.state = 436
                self.match(ErlangParser.T__3)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 438
                self.tokAtom()
                self.state = 439
                self.match(ErlangParser.T__4)
                self.state = 440
                self.tokAtom()
                self.state = 441
                self.match(ErlangParser.T__2)
                self.state = 442
                self.match(ErlangParser.T__3)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 444
                self.tokAtom()
                self.state = 445
                self.match(ErlangParser.T__4)
                self.state = 446
                self.tokAtom()
                self.state = 447
                self.match(ErlangParser.T__2)
                self.state = 448
                self.topTypes()
                self.state = 449
                self.match(ErlangParser.T__3)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 451
                self.match(ErlangParser.T__13)
                self.state = 452
                self.match(ErlangParser.T__14)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 453
                self.match(ErlangParser.T__13)
                self.state = 454
                self.topType()
                self.state = 455
                self.match(ErlangParser.T__14)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 457
                self.match(ErlangParser.T__13)
                self.state = 458
                self.topType()
                self.state = 459
                self.match(ErlangParser.T__5)
                self.state = 460
                self.match(ErlangParser.T__15)
                self.state = 461
                self.match(ErlangParser.T__14)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 463
                self.match(ErlangParser.T__16)
                self.state = 464
                self.match(ErlangParser.T__7)
                self.state = 465
                self.match(ErlangParser.T__8)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 466
                self.match(ErlangParser.T__16)
                self.state = 467
                self.match(ErlangParser.T__7)
                self.state = 468
                self.mapPairTypes()
                self.state = 469
                self.match(ErlangParser.T__8)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 471
                self.match(ErlangParser.T__7)
                self.state = 472
                self.match(ErlangParser.T__8)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 473
                self.match(ErlangParser.T__7)
                self.state = 474
                self.topTypes()
                self.state = 475
                self.match(ErlangParser.T__8)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 477
                self.match(ErlangParser.T__16)
                self.state = 478
                self.tokAtom()
                self.state = 479
                self.match(ErlangParser.T__7)
                self.state = 480
                self.match(ErlangParser.T__8)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 482
                self.match(ErlangParser.T__16)
                self.state = 483
                self.tokAtom()
                self.state = 484
                self.match(ErlangParser.T__7)
                self.state = 485
                self.fieldTypes()
                self.state = 486
                self.match(ErlangParser.T__8)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 488
                self.binaryType()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 489
                self.tokInteger()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 490
                self.tokChar()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 491
                self.match(ErlangParser.T__17)
                self.state = 492
                self.match(ErlangParser.T__2)
                self.state = 493
                self.match(ErlangParser.T__3)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 494
                self.match(ErlangParser.T__17)
                self.state = 495
                self.match(ErlangParser.T__2)
                self.state = 496
                self.funType100()
                self.state = 497
                self.match(ErlangParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunType100Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topType(self):
            return self.getTypedRuleContext(ErlangParser.TopTypeContext,0)


        def funType(self):
            return self.getTypedRuleContext(ErlangParser.FunTypeContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_funType100

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunType100" ):
                listener.enterFunType100(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunType100" ):
                listener.exitFunType100(self)




    def funType100(self):

        localctx = ErlangParser.FunType100Context(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_funType100)
        try:
            self.state = 507
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 501
                self.match(ErlangParser.T__2)
                self.state = 502
                self.match(ErlangParser.T__15)
                self.state = 503
                self.match(ErlangParser.T__3)
                self.state = 504
                self.match(ErlangParser.T__18)
                self.state = 505
                self.topType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 506
                self.funType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topType(self):
            return self.getTypedRuleContext(ErlangParser.TopTypeContext,0)


        def topTypes(self):
            return self.getTypedRuleContext(ErlangParser.TopTypesContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_funType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunType" ):
                listener.enterFunType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunType" ):
                listener.exitFunType(self)




    def funType(self):

        localctx = ErlangParser.FunTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_funType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.match(ErlangParser.T__2)
            self.state = 511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ErlangParser.T__1) | (1 << ErlangParser.T__2) | (1 << ErlangParser.T__7) | (1 << ErlangParser.T__13) | (1 << ErlangParser.T__16) | (1 << ErlangParser.T__17) | (1 << ErlangParser.T__21) | (1 << ErlangParser.T__41) | (1 << ErlangParser.T__42) | (1 << ErlangParser.T__43))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ErlangParser.TokAtom - 65)) | (1 << (ErlangParser.TokVar - 65)) | (1 << (ErlangParser.TokInteger - 65)) | (1 << (ErlangParser.TokChar - 65)))) != 0):
                self.state = 510
                self.topTypes()


            self.state = 513
            self.match(ErlangParser.T__3)
            self.state = 514
            self.match(ErlangParser.T__18)
            self.state = 515
            self.topType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapPairTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapPairType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.MapPairTypeContext)
            else:
                return self.getTypedRuleContext(ErlangParser.MapPairTypeContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_mapPairTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapPairTypes" ):
                listener.enterMapPairTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapPairTypes" ):
                listener.exitMapPairTypes(self)




    def mapPairTypes(self):

        localctx = ErlangParser.MapPairTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_mapPairTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.mapPairType()
            self.state = 522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ErlangParser.T__5:
                self.state = 518
                self.match(ErlangParser.T__5)
                self.state = 519
                self.mapPairType()
                self.state = 524
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapPairTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.TopTypeContext)
            else:
                return self.getTypedRuleContext(ErlangParser.TopTypeContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_mapPairType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapPairType" ):
                listener.enterMapPairType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapPairType" ):
                listener.exitMapPairType(self)




    def mapPairType(self):

        localctx = ErlangParser.MapPairTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_mapPairType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.topType()
            self.state = 526
            _la = self._input.LA(1)
            if not(_la==ErlangParser.T__19 or _la==ErlangParser.T__20):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 527
            self.topType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.FieldTypeContext)
            else:
                return self.getTypedRuleContext(ErlangParser.FieldTypeContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_fieldTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldTypes" ):
                listener.enterFieldTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldTypes" ):
                listener.exitFieldTypes(self)




    def fieldTypes(self):

        localctx = ErlangParser.FieldTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_fieldTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 529
            self.fieldType()
            self.state = 534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ErlangParser.T__5:
                self.state = 530
                self.match(ErlangParser.T__5)
                self.state = 531
                self.fieldType()
                self.state = 536
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokAtom(self):
            return self.getTypedRuleContext(ErlangParser.TokAtomContext,0)


        def topType(self):
            return self.getTypedRuleContext(ErlangParser.TopTypeContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_fieldType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldType" ):
                listener.enterFieldType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldType" ):
                listener.exitFieldType(self)




    def fieldType(self):

        localctx = ErlangParser.FieldTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_fieldType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.tokAtom()
            self.state = 538
            self.match(ErlangParser.T__6)
            self.state = 539
            self.topType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binBaseType(self):
            return self.getTypedRuleContext(ErlangParser.BinBaseTypeContext,0)


        def binUnitType(self):
            return self.getTypedRuleContext(ErlangParser.BinUnitTypeContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_binaryType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryType" ):
                listener.enterBinaryType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryType" ):
                listener.exitBinaryType(self)




    def binaryType(self):

        localctx = ErlangParser.BinaryTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_binaryType)
        try:
            self.state = 557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 541
                self.match(ErlangParser.T__21)
                self.state = 542
                self.match(ErlangParser.T__22)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 543
                self.match(ErlangParser.T__21)
                self.state = 544
                self.binBaseType()
                self.state = 545
                self.match(ErlangParser.T__22)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 547
                self.match(ErlangParser.T__21)
                self.state = 548
                self.binUnitType()
                self.state = 549
                self.match(ErlangParser.T__22)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 551
                self.match(ErlangParser.T__21)
                self.state = 552
                self.binBaseType()
                self.state = 553
                self.match(ErlangParser.T__5)
                self.state = 554
                self.binUnitType()
                self.state = 555
                self.match(ErlangParser.T__22)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinBaseTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokVar(self):
            return self.getTypedRuleContext(ErlangParser.TokVarContext,0)


        def re_type(self):
            return self.getTypedRuleContext(ErlangParser.Re_typeContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_binBaseType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinBaseType" ):
                listener.enterBinBaseType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinBaseType" ):
                listener.exitBinBaseType(self)




    def binBaseType(self):

        localctx = ErlangParser.BinBaseTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_binBaseType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self.tokVar()
            self.state = 560
            self.match(ErlangParser.T__4)
            self.state = 561
            self.re_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinUnitTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokVar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.TokVarContext)
            else:
                return self.getTypedRuleContext(ErlangParser.TokVarContext,i)


        def re_type(self):
            return self.getTypedRuleContext(ErlangParser.Re_typeContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_binUnitType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinUnitType" ):
                listener.enterBinUnitType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinUnitType" ):
                listener.exitBinUnitType(self)




    def binUnitType(self):

        localctx = ErlangParser.BinUnitTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_binUnitType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 563
            self.tokVar()
            self.state = 564
            self.match(ErlangParser.T__4)
            self.state = 565
            self.tokVar()
            self.state = 566
            self.match(ErlangParser.T__23)
            self.state = 567
            self.re_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrValContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def exprs(self):
            return self.getTypedRuleContext(ErlangParser.ExprsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_attrVal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrVal" ):
                listener.enterAttrVal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrVal" ):
                listener.exitAttrVal(self)




    def attrVal(self):

        localctx = ErlangParser.AttrValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_attrVal)
        try:
            self.state = 584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 569
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 570
                self.match(ErlangParser.T__2)
                self.state = 571
                self.expr()
                self.state = 572
                self.match(ErlangParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 574
                self.expr()
                self.state = 575
                self.match(ErlangParser.T__5)
                self.state = 576
                self.exprs()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 578
                self.match(ErlangParser.T__2)
                self.state = 579
                self.expr()
                self.state = 580
                self.match(ErlangParser.T__5)
                self.state = 581
                self.exprs()
                self.state = 582
                self.match(ErlangParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.FunctionClauseContext)
            else:
                return self.getTypedRuleContext(ErlangParser.FunctionClauseContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_function_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_" ):
                listener.enterFunction_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_" ):
                listener.exitFunction_(self)




    def function_(self):

        localctx = ErlangParser.Function_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_function_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.functionClause()
            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ErlangParser.T__9:
                self.state = 587
                self.match(ErlangParser.T__9)
                self.state = 588
                self.functionClause()
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokAtom(self):
            return self.getTypedRuleContext(ErlangParser.TokAtomContext,0)


        def clauseArgs(self):
            return self.getTypedRuleContext(ErlangParser.ClauseArgsContext,0)


        def clauseGuard(self):
            return self.getTypedRuleContext(ErlangParser.ClauseGuardContext,0)


        def clauseBody(self):
            return self.getTypedRuleContext(ErlangParser.ClauseBodyContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_functionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionClause" ):
                listener.enterFunctionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionClause" ):
                listener.exitFunctionClause(self)




    def functionClause(self):

        localctx = ErlangParser.FunctionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_functionClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.tokAtom()
            self.state = 595
            self.clauseArgs()
            self.state = 596
            self.clauseGuard()
            self.state = 597
            self.clauseBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClauseArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patArgumentList(self):
            return self.getTypedRuleContext(ErlangParser.PatArgumentListContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_clauseArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClauseArgs" ):
                listener.enterClauseArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClauseArgs" ):
                listener.exitClauseArgs(self)




    def clauseArgs(self):

        localctx = ErlangParser.ClauseArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_clauseArgs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self.patArgumentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClauseGuardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def guard(self):
            return self.getTypedRuleContext(ErlangParser.GuardContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_clauseGuard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClauseGuard" ):
                listener.enterClauseGuard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClauseGuard" ):
                listener.exitClauseGuard(self)




    def clauseGuard(self):

        localctx = ErlangParser.ClauseGuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_clauseGuard)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ErlangParser.T__10:
                self.state = 601
                self.match(ErlangParser.T__10)
                self.state = 602
                self.guard()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClauseBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprs(self):
            return self.getTypedRuleContext(ErlangParser.ExprsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_clauseBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClauseBody" ):
                listener.enterClauseBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClauseBody" ):
                listener.exitClauseBody(self)




    def clauseBody(self):

        localctx = ErlangParser.ClauseBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_clauseBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(ErlangParser.T__18)
            self.state = 606
            self.exprs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def expr100(self):
            return self.getTypedRuleContext(ErlangParser.Expr100Context,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = ErlangParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_expr)
        try:
            self.state = 611
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ErlangParser.T__24]:
                self.enterOuterAlt(localctx, 1)
                self.state = 608
                self.match(ErlangParser.T__24)
                self.state = 609
                self.expr()
                pass
            elif token in [ErlangParser.T__1, ErlangParser.T__2, ErlangParser.T__7, ErlangParser.T__13, ErlangParser.T__16, ErlangParser.T__17, ErlangParser.T__21, ErlangParser.T__29, ErlangParser.T__35, ErlangParser.T__36, ErlangParser.T__38, ErlangParser.T__40, ErlangParser.T__41, ErlangParser.T__42, ErlangParser.T__43, ErlangParser.TokAtom, ErlangParser.TokVar, ErlangParser.TokFloat, ErlangParser.TokInteger, ErlangParser.TokChar, ErlangParser.TokString]:
                self.enterOuterAlt(localctx, 2)
                self.state = 610
                self.expr100()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr100Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr150(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.Expr150Context)
            else:
                return self.getTypedRuleContext(ErlangParser.Expr150Context,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_expr100

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr100" ):
                listener.enterExpr100(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr100" ):
                listener.exitExpr100(self)




    def expr100(self):

        localctx = ErlangParser.Expr100Context(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_expr100)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.expr150()
            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ErlangParser.T__25 or _la==ErlangParser.T__26:
                self.state = 614
                _la = self._input.LA(1)
                if not(_la==ErlangParser.T__25 or _la==ErlangParser.T__26):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 615
                self.expr150()
                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr150Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr160(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.Expr160Context)
            else:
                return self.getTypedRuleContext(ErlangParser.Expr160Context,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_expr150

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr150" ):
                listener.enterExpr150(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr150" ):
                listener.exitExpr150(self)




    def expr150(self):

        localctx = ErlangParser.Expr150Context(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_expr150)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.expr160()
            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ErlangParser.T__27:
                self.state = 622
                self.match(ErlangParser.T__27)
                self.state = 623
                self.expr160()
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr160Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr200(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.Expr200Context)
            else:
                return self.getTypedRuleContext(ErlangParser.Expr200Context,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_expr160

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr160" ):
                listener.enterExpr160(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr160" ):
                listener.exitExpr160(self)




    def expr160(self):

        localctx = ErlangParser.Expr160Context(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_expr160)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.expr200()
            self.state = 634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ErlangParser.T__28:
                self.state = 630
                self.match(ErlangParser.T__28)
                self.state = 631
                self.expr200()
                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr200Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr300(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.Expr300Context)
            else:
                return self.getTypedRuleContext(ErlangParser.Expr300Context,i)


        def compOp(self):
            return self.getTypedRuleContext(ErlangParser.CompOpContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_expr200

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr200" ):
                listener.enterExpr200(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr200" ):
                listener.exitExpr200(self)




    def expr200(self):

        localctx = ErlangParser.Expr200Context(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_expr200)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.expr300()
            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & ((1 << (ErlangParser.T__56 - 57)) | (1 << (ErlangParser.T__57 - 57)) | (1 << (ErlangParser.T__58 - 57)) | (1 << (ErlangParser.T__59 - 57)) | (1 << (ErlangParser.T__60 - 57)) | (1 << (ErlangParser.T__61 - 57)) | (1 << (ErlangParser.T__62 - 57)) | (1 << (ErlangParser.T__63 - 57)))) != 0):
                self.state = 638
                self.compOp()
                self.state = 639
                self.expr300()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr300Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr400(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.Expr400Context)
            else:
                return self.getTypedRuleContext(ErlangParser.Expr400Context,i)


        def listOp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.ListOpContext)
            else:
                return self.getTypedRuleContext(ErlangParser.ListOpContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_expr300

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr300" ):
                listener.enterExpr300(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr300" ):
                listener.exitExpr300(self)




    def expr300(self):

        localctx = ErlangParser.Expr300Context(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_expr300)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.expr400()
            self.state = 649
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ErlangParser.T__54 or _la==ErlangParser.T__55:
                self.state = 644
                self.listOp()
                self.state = 645
                self.expr400()
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr400Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr500(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.Expr500Context)
            else:
                return self.getTypedRuleContext(ErlangParser.Expr500Context,i)


        def addOp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.AddOpContext)
            else:
                return self.getTypedRuleContext(ErlangParser.AddOpContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_expr400

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr400" ):
                listener.enterExpr400(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr400" ):
                listener.exitExpr400(self)




    def expr400(self):

        localctx = ErlangParser.Expr400Context(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_expr400)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.expr500()
            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ErlangParser.T__1) | (1 << ErlangParser.T__41) | (1 << ErlangParser.T__48) | (1 << ErlangParser.T__49) | (1 << ErlangParser.T__50) | (1 << ErlangParser.T__51) | (1 << ErlangParser.T__52) | (1 << ErlangParser.T__53))) != 0):
                self.state = 653
                self.addOp()
                self.state = 654
                self.expr500()
                self.state = 660
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr500Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr600(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.Expr600Context)
            else:
                return self.getTypedRuleContext(ErlangParser.Expr600Context,i)


        def multOp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.MultOpContext)
            else:
                return self.getTypedRuleContext(ErlangParser.MultOpContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_expr500

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr500" ):
                listener.enterExpr500(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr500" ):
                listener.exitExpr500(self)




    def expr500(self):

        localctx = ErlangParser.Expr500Context(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_expr500)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self.expr600()
            self.state = 667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ErlangParser.T__23) | (1 << ErlangParser.T__31) | (1 << ErlangParser.T__44) | (1 << ErlangParser.T__45) | (1 << ErlangParser.T__46) | (1 << ErlangParser.T__47))) != 0):
                self.state = 662
                self.multOp()
                self.state = 663
                self.expr600()
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr600Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefixOp(self):
            return self.getTypedRuleContext(ErlangParser.PrefixOpContext,0)


        def expr600(self):
            return self.getTypedRuleContext(ErlangParser.Expr600Context,0)


        def expr650(self):
            return self.getTypedRuleContext(ErlangParser.Expr650Context,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_expr600

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr600" ):
                listener.enterExpr600(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr600" ):
                listener.exitExpr600(self)




    def expr600(self):

        localctx = ErlangParser.Expr600Context(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_expr600)
        try:
            self.state = 674
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ErlangParser.T__1, ErlangParser.T__41, ErlangParser.T__42, ErlangParser.T__43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 670
                self.prefixOp()
                self.state = 671
                self.expr600()
                pass
            elif token in [ErlangParser.T__2, ErlangParser.T__7, ErlangParser.T__13, ErlangParser.T__16, ErlangParser.T__17, ErlangParser.T__21, ErlangParser.T__29, ErlangParser.T__35, ErlangParser.T__36, ErlangParser.T__38, ErlangParser.T__40, ErlangParser.TokAtom, ErlangParser.TokVar, ErlangParser.TokFloat, ErlangParser.TokInteger, ErlangParser.TokChar, ErlangParser.TokString]:
                self.enterOuterAlt(localctx, 2)
                self.state = 673
                self.expr650()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr650Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapExpr(self):
            return self.getTypedRuleContext(ErlangParser.MapExprContext,0)


        def expr700(self):
            return self.getTypedRuleContext(ErlangParser.Expr700Context,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_expr650

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr650" ):
                listener.enterExpr650(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr650" ):
                listener.exitExpr650(self)




    def expr650(self):

        localctx = ErlangParser.Expr650Context(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_expr650)
        try:
            self.state = 678
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 676
                self.mapExpr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 677
                self.expr700()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr700Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(ErlangParser.FunctionCallContext,0)


        def recordExpr(self):
            return self.getTypedRuleContext(ErlangParser.RecordExprContext,0)


        def expr800(self):
            return self.getTypedRuleContext(ErlangParser.Expr800Context,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_expr700

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr700" ):
                listener.enterExpr700(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr700" ):
                listener.exitExpr700(self)




    def expr700(self):

        localctx = ErlangParser.Expr700Context(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_expr700)
        try:
            self.state = 683
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 680
                self.functionCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 681
                self.recordExpr(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 682
                self.expr800()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr800Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprMax(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.ExprMaxContext)
            else:
                return self.getTypedRuleContext(ErlangParser.ExprMaxContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_expr800

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr800" ):
                listener.enterExpr800(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr800" ):
                listener.exitExpr800(self)




    def expr800(self):

        localctx = ErlangParser.Expr800Context(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_expr800)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.exprMax()
            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ErlangParser.T__4:
                self.state = 686
                self.match(ErlangParser.T__4)
                self.state = 687
                self.exprMax()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprMaxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokVar(self):
            return self.getTypedRuleContext(ErlangParser.TokVarContext,0)


        def atomic(self):
            return self.getTypedRuleContext(ErlangParser.AtomicContext,0)


        def re_list(self):
            return self.getTypedRuleContext(ErlangParser.Re_listContext,0)


        def binary(self):
            return self.getTypedRuleContext(ErlangParser.BinaryContext,0)


        def listComprehension(self):
            return self.getTypedRuleContext(ErlangParser.ListComprehensionContext,0)


        def binaryComprehension(self):
            return self.getTypedRuleContext(ErlangParser.BinaryComprehensionContext,0)


        def re_tuple(self):
            return self.getTypedRuleContext(ErlangParser.Re_tupleContext,0)


        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def exprs(self):
            return self.getTypedRuleContext(ErlangParser.ExprsContext,0)


        def ifExpr(self):
            return self.getTypedRuleContext(ErlangParser.IfExprContext,0)


        def caseExpr(self):
            return self.getTypedRuleContext(ErlangParser.CaseExprContext,0)


        def receiveExpr(self):
            return self.getTypedRuleContext(ErlangParser.ReceiveExprContext,0)


        def funExpr(self):
            return self.getTypedRuleContext(ErlangParser.FunExprContext,0)


        def tryExpr(self):
            return self.getTypedRuleContext(ErlangParser.TryExprContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_exprMax

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprMax" ):
                listener.enterExprMax(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprMax" ):
                listener.exitExprMax(self)




    def exprMax(self):

        localctx = ErlangParser.ExprMaxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_exprMax)
        try:
            self.state = 710
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 690
                self.tokVar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 691
                self.atomic()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 692
                self.re_list()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 693
                self.binary()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 694
                self.listComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 695
                self.binaryComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 696
                self.re_tuple()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 697
                self.match(ErlangParser.T__2)
                self.state = 698
                self.expr()
                self.state = 699
                self.match(ErlangParser.T__3)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 701
                self.match(ErlangParser.T__29)
                self.state = 702
                self.exprs()
                self.state = 703
                self.match(ErlangParser.T__30)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 705
                self.ifExpr()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 706
                self.caseExpr()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 707
                self.receiveExpr()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 708
                self.funExpr()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 709
                self.tryExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patExpr200(self):
            return self.getTypedRuleContext(ErlangParser.PatExpr200Context,0)


        def patExpr(self):
            return self.getTypedRuleContext(ErlangParser.PatExprContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_patExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatExpr" ):
                listener.enterPatExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatExpr" ):
                listener.exitPatExpr(self)




    def patExpr(self):

        localctx = ErlangParser.PatExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_patExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.patExpr200()
            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ErlangParser.T__25:
                self.state = 713
                self.match(ErlangParser.T__25)
                self.state = 714
                self.patExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatExpr200Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patExpr300(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.PatExpr300Context)
            else:
                return self.getTypedRuleContext(ErlangParser.PatExpr300Context,i)


        def compOp(self):
            return self.getTypedRuleContext(ErlangParser.CompOpContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_patExpr200

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatExpr200" ):
                listener.enterPatExpr200(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatExpr200" ):
                listener.exitPatExpr200(self)




    def patExpr200(self):

        localctx = ErlangParser.PatExpr200Context(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_patExpr200)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.patExpr300()
            self.state = 721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & ((1 << (ErlangParser.T__56 - 57)) | (1 << (ErlangParser.T__57 - 57)) | (1 << (ErlangParser.T__58 - 57)) | (1 << (ErlangParser.T__59 - 57)) | (1 << (ErlangParser.T__60 - 57)) | (1 << (ErlangParser.T__61 - 57)) | (1 << (ErlangParser.T__62 - 57)) | (1 << (ErlangParser.T__63 - 57)))) != 0):
                self.state = 718
                self.compOp()
                self.state = 719
                self.patExpr300()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatExpr300Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patExpr400(self):
            return self.getTypedRuleContext(ErlangParser.PatExpr400Context,0)


        def listOp(self):
            return self.getTypedRuleContext(ErlangParser.ListOpContext,0)


        def patExpr300(self):
            return self.getTypedRuleContext(ErlangParser.PatExpr300Context,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_patExpr300

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatExpr300" ):
                listener.enterPatExpr300(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatExpr300" ):
                listener.exitPatExpr300(self)




    def patExpr300(self):

        localctx = ErlangParser.PatExpr300Context(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_patExpr300)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.patExpr400(0)
            self.state = 727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ErlangParser.T__54 or _la==ErlangParser.T__55:
                self.state = 724
                self.listOp()
                self.state = 725
                self.patExpr300()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatExpr400Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patExpr500(self):
            return self.getTypedRuleContext(ErlangParser.PatExpr500Context,0)


        def patExpr400(self):
            return self.getTypedRuleContext(ErlangParser.PatExpr400Context,0)


        def addOp(self):
            return self.getTypedRuleContext(ErlangParser.AddOpContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_patExpr400

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatExpr400" ):
                listener.enterPatExpr400(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatExpr400" ):
                listener.exitPatExpr400(self)



    def patExpr400(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ErlangParser.PatExpr400Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 116
        self.enterRecursionRule(localctx, 116, self.RULE_patExpr400, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.patExpr500(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 738
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ErlangParser.PatExpr400Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_patExpr400)
                    self.state = 732
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 733
                    self.addOp()
                    self.state = 734
                    self.patExpr500(0) 
                self.state = 740
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PatExpr500Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patExpr600(self):
            return self.getTypedRuleContext(ErlangParser.PatExpr600Context,0)


        def patExpr500(self):
            return self.getTypedRuleContext(ErlangParser.PatExpr500Context,0)


        def multOp(self):
            return self.getTypedRuleContext(ErlangParser.MultOpContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_patExpr500

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatExpr500" ):
                listener.enterPatExpr500(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatExpr500" ):
                listener.exitPatExpr500(self)



    def patExpr500(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ErlangParser.PatExpr500Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 118
        self.enterRecursionRule(localctx, 118, self.RULE_patExpr500, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.patExpr600()
            self._ctx.stop = self._input.LT(-1)
            self.state = 750
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ErlangParser.PatExpr500Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_patExpr500)
                    self.state = 744
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 745
                    self.multOp()
                    self.state = 746
                    self.patExpr600() 
                self.state = 752
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PatExpr600Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefixOp(self):
            return self.getTypedRuleContext(ErlangParser.PrefixOpContext,0)


        def patExpr600(self):
            return self.getTypedRuleContext(ErlangParser.PatExpr600Context,0)


        def patExpr650(self):
            return self.getTypedRuleContext(ErlangParser.PatExpr650Context,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_patExpr600

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatExpr600" ):
                listener.enterPatExpr600(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatExpr600" ):
                listener.exitPatExpr600(self)




    def patExpr600(self):

        localctx = ErlangParser.PatExpr600Context(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_patExpr600)
        try:
            self.state = 757
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ErlangParser.T__1, ErlangParser.T__41, ErlangParser.T__42, ErlangParser.T__43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 753
                self.prefixOp()
                self.state = 754
                self.patExpr600()
                pass
            elif token in [ErlangParser.T__2, ErlangParser.T__7, ErlangParser.T__13, ErlangParser.T__16, ErlangParser.T__21, ErlangParser.TokAtom, ErlangParser.TokVar, ErlangParser.TokFloat, ErlangParser.TokInteger, ErlangParser.TokChar, ErlangParser.TokString]:
                self.enterOuterAlt(localctx, 2)
                self.state = 756
                self.patExpr650()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatExpr650Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapPatExpr(self):
            return self.getTypedRuleContext(ErlangParser.MapPatExprContext,0)


        def patExpr700(self):
            return self.getTypedRuleContext(ErlangParser.PatExpr700Context,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_patExpr650

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatExpr650" ):
                listener.enterPatExpr650(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatExpr650" ):
                listener.exitPatExpr650(self)




    def patExpr650(self):

        localctx = ErlangParser.PatExpr650Context(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_patExpr650)
        try:
            self.state = 761
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 759
                self.mapPatExpr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 760
                self.patExpr700()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatExpr700Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordPatExpr(self):
            return self.getTypedRuleContext(ErlangParser.RecordPatExprContext,0)


        def patExpr800(self):
            return self.getTypedRuleContext(ErlangParser.PatExpr800Context,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_patExpr700

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatExpr700" ):
                listener.enterPatExpr700(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatExpr700" ):
                listener.exitPatExpr700(self)




    def patExpr700(self):

        localctx = ErlangParser.PatExpr700Context(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_patExpr700)
        try:
            self.state = 765
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ErlangParser.T__16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 763
                self.recordPatExpr()
                pass
            elif token in [ErlangParser.T__2, ErlangParser.T__7, ErlangParser.T__13, ErlangParser.T__21, ErlangParser.TokAtom, ErlangParser.TokVar, ErlangParser.TokFloat, ErlangParser.TokInteger, ErlangParser.TokChar, ErlangParser.TokString]:
                self.enterOuterAlt(localctx, 2)
                self.state = 764
                self.patExpr800()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatExpr800Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patExprMax(self):
            return self.getTypedRuleContext(ErlangParser.PatExprMaxContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_patExpr800

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatExpr800" ):
                listener.enterPatExpr800(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatExpr800" ):
                listener.exitPatExpr800(self)




    def patExpr800(self):

        localctx = ErlangParser.PatExpr800Context(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_patExpr800)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.patExprMax()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatExprMaxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokVar(self):
            return self.getTypedRuleContext(ErlangParser.TokVarContext,0)


        def atomic(self):
            return self.getTypedRuleContext(ErlangParser.AtomicContext,0)


        def re_list(self):
            return self.getTypedRuleContext(ErlangParser.Re_listContext,0)


        def binary(self):
            return self.getTypedRuleContext(ErlangParser.BinaryContext,0)


        def re_tuple(self):
            return self.getTypedRuleContext(ErlangParser.Re_tupleContext,0)


        def patExpr(self):
            return self.getTypedRuleContext(ErlangParser.PatExprContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_patExprMax

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatExprMax" ):
                listener.enterPatExprMax(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatExprMax" ):
                listener.exitPatExprMax(self)




    def patExprMax(self):

        localctx = ErlangParser.PatExprMaxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_patExprMax)
        try:
            self.state = 778
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ErlangParser.TokVar]:
                self.enterOuterAlt(localctx, 1)
                self.state = 769
                self.tokVar()
                pass
            elif token in [ErlangParser.TokAtom, ErlangParser.TokFloat, ErlangParser.TokInteger, ErlangParser.TokChar, ErlangParser.TokString]:
                self.enterOuterAlt(localctx, 2)
                self.state = 770
                self.atomic()
                pass
            elif token in [ErlangParser.T__13]:
                self.enterOuterAlt(localctx, 3)
                self.state = 771
                self.re_list()
                pass
            elif token in [ErlangParser.T__21]:
                self.enterOuterAlt(localctx, 4)
                self.state = 772
                self.binary()
                pass
            elif token in [ErlangParser.T__7]:
                self.enterOuterAlt(localctx, 5)
                self.state = 773
                self.re_tuple()
                pass
            elif token in [ErlangParser.T__2]:
                self.enterOuterAlt(localctx, 6)
                self.state = 774
                self.match(ErlangParser.T__2)
                self.state = 775
                self.patExpr()
                self.state = 776
                self.match(ErlangParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapPatExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapTuple(self):
            return self.getTypedRuleContext(ErlangParser.MapTupleContext,0)


        def patExprMax(self):
            return self.getTypedRuleContext(ErlangParser.PatExprMaxContext,0)


        def mapPatExpr(self):
            return self.getTypedRuleContext(ErlangParser.MapPatExprContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_mapPatExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapPatExpr" ):
                listener.enterMapPatExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapPatExpr" ):
                listener.exitMapPatExpr(self)



    def mapPatExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ErlangParser.MapPatExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 130
        self.enterRecursionRule(localctx, 130, self.RULE_mapPatExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ErlangParser.T__2) | (1 << ErlangParser.T__7) | (1 << ErlangParser.T__13) | (1 << ErlangParser.T__21))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ErlangParser.TokAtom - 65)) | (1 << (ErlangParser.TokVar - 65)) | (1 << (ErlangParser.TokFloat - 65)) | (1 << (ErlangParser.TokInteger - 65)) | (1 << (ErlangParser.TokChar - 65)) | (1 << (ErlangParser.TokString - 65)))) != 0):
                self.state = 781
                self.patExprMax()


            self.state = 784
            self.match(ErlangParser.T__16)
            self.state = 785
            self.mapTuple()
            self._ctx.stop = self._input.LT(-1)
            self.state = 792
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ErlangParser.MapPatExprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mapPatExpr)
                    self.state = 787
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 788
                    self.match(ErlangParser.T__16)
                    self.state = 789
                    self.mapTuple() 
                self.state = 794
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class RecordPatExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.TokAtomContext)
            else:
                return self.getTypedRuleContext(ErlangParser.TokAtomContext,i)


        def recordTuple(self):
            return self.getTypedRuleContext(ErlangParser.RecordTupleContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_recordPatExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordPatExpr" ):
                listener.enterRecordPatExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordPatExpr" ):
                listener.exitRecordPatExpr(self)




    def recordPatExpr(self):

        localctx = ErlangParser.RecordPatExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_recordPatExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.match(ErlangParser.T__16)
            self.state = 796
            self.tokAtom()
            self.state = 800
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ErlangParser.T__0]:
                self.state = 797
                self.match(ErlangParser.T__0)
                self.state = 798
                self.tokAtom()
                pass
            elif token in [ErlangParser.T__7]:
                self.state = 799
                self.recordTuple()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Re_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def tail(self):
            return self.getTypedRuleContext(ErlangParser.TailContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_re_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRe_list" ):
                listener.enterRe_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRe_list" ):
                listener.exitRe_list(self)




    def re_list(self):

        localctx = ErlangParser.Re_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_re_list)
        try:
            self.state = 808
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 802
                self.match(ErlangParser.T__13)
                self.state = 803
                self.match(ErlangParser.T__14)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 804
                self.match(ErlangParser.T__13)
                self.state = 805
                self.expr()
                self.state = 806
                self.tail()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def tail(self):
            return self.getTypedRuleContext(ErlangParser.TailContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_tail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTail" ):
                listener.enterTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTail" ):
                listener.exitTail(self)




    def tail(self):

        localctx = ErlangParser.TailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_tail)
        try:
            self.state = 819
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ErlangParser.T__14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 810
                self.match(ErlangParser.T__14)
                pass
            elif token in [ErlangParser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 811
                self.match(ErlangParser.T__11)
                self.state = 812
                self.expr()
                self.state = 813
                self.match(ErlangParser.T__14)
                pass
            elif token in [ErlangParser.T__5]:
                self.enterOuterAlt(localctx, 3)
                self.state = 815
                self.match(ErlangParser.T__5)
                self.state = 816
                self.expr()
                self.state = 817
                self.tail()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binElements(self):
            return self.getTypedRuleContext(ErlangParser.BinElementsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_binary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary" ):
                listener.enterBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary" ):
                listener.exitBinary(self)




    def binary(self):

        localctx = ErlangParser.BinaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_binary)
        try:
            self.state = 827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 821
                self.match(ErlangParser.T__21)
                self.state = 822
                self.match(ErlangParser.T__22)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 823
                self.match(ErlangParser.T__21)
                self.state = 824
                self.binElements()
                self.state = 825
                self.match(ErlangParser.T__22)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinElementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.BinElementContext)
            else:
                return self.getTypedRuleContext(ErlangParser.BinElementContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_binElements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinElements" ):
                listener.enterBinElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinElements" ):
                listener.exitBinElements(self)




    def binElements(self):

        localctx = ErlangParser.BinElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_binElements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.binElement()
            self.state = 834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ErlangParser.T__5:
                self.state = 830
                self.match(ErlangParser.T__5)
                self.state = 831
                self.binElement()
                self.state = 836
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitExpr(self):
            return self.getTypedRuleContext(ErlangParser.BitExprContext,0)


        def optBitSizeExpr(self):
            return self.getTypedRuleContext(ErlangParser.OptBitSizeExprContext,0)


        def optBitTypeList(self):
            return self.getTypedRuleContext(ErlangParser.OptBitTypeListContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_binElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinElement" ):
                listener.enterBinElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinElement" ):
                listener.exitBinElement(self)




    def binElement(self):

        localctx = ErlangParser.BinElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_binElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self.bitExpr()
            self.state = 838
            self.optBitSizeExpr()
            self.state = 839
            self.optBitTypeList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprMax(self):
            return self.getTypedRuleContext(ErlangParser.ExprMaxContext,0)


        def prefixOp(self):
            return self.getTypedRuleContext(ErlangParser.PrefixOpContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_bitExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitExpr" ):
                listener.enterBitExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitExpr" ):
                listener.exitBitExpr(self)




    def bitExpr(self):

        localctx = ErlangParser.BitExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_bitExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ErlangParser.T__1) | (1 << ErlangParser.T__41) | (1 << ErlangParser.T__42) | (1 << ErlangParser.T__43))) != 0):
                self.state = 841
                self.prefixOp()


            self.state = 844
            self.exprMax()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptBitSizeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitSizeExpr(self):
            return self.getTypedRuleContext(ErlangParser.BitSizeExprContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_optBitSizeExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptBitSizeExpr" ):
                listener.enterOptBitSizeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptBitSizeExpr" ):
                listener.exitOptBitSizeExpr(self)




    def optBitSizeExpr(self):

        localctx = ErlangParser.OptBitSizeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_optBitSizeExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ErlangParser.T__4:
                self.state = 846
                self.match(ErlangParser.T__4)
                self.state = 847
                self.bitSizeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptBitTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitTypeList(self):
            return self.getTypedRuleContext(ErlangParser.BitTypeListContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_optBitTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptBitTypeList" ):
                listener.enterOptBitTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptBitTypeList" ):
                listener.exitOptBitTypeList(self)




    def optBitTypeList(self):

        localctx = ErlangParser.OptBitTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_optBitTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ErlangParser.T__31:
                self.state = 850
                self.match(ErlangParser.T__31)
                self.state = 851
                self.bitTypeList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.BitTypeContext)
            else:
                return self.getTypedRuleContext(ErlangParser.BitTypeContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_bitTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitTypeList" ):
                listener.enterBitTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitTypeList" ):
                listener.exitBitTypeList(self)




    def bitTypeList(self):

        localctx = ErlangParser.BitTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_bitTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.bitType()
            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ErlangParser.T__1:
                self.state = 855
                self.match(ErlangParser.T__1)
                self.state = 856
                self.bitType()
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokAtom(self):
            return self.getTypedRuleContext(ErlangParser.TokAtomContext,0)


        def tokInteger(self):
            return self.getTypedRuleContext(ErlangParser.TokIntegerContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_bitType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitType" ):
                listener.enterBitType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitType" ):
                listener.exitBitType(self)




    def bitType(self):

        localctx = ErlangParser.BitTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_bitType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.tokAtom()
            self.state = 865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ErlangParser.T__4:
                self.state = 863
                self.match(ErlangParser.T__4)
                self.state = 864
                self.tokInteger()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitSizeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprMax(self):
            return self.getTypedRuleContext(ErlangParser.ExprMaxContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_bitSizeExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitSizeExpr" ):
                listener.enterBitSizeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitSizeExpr" ):
                listener.exitBitSizeExpr(self)




    def bitSizeExpr(self):

        localctx = ErlangParser.BitSizeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_bitSizeExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.exprMax()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def lcExprs(self):
            return self.getTypedRuleContext(ErlangParser.LcExprsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_listComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListComprehension" ):
                listener.enterListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListComprehension" ):
                listener.exitListComprehension(self)




    def listComprehension(self):

        localctx = ErlangParser.ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_listComprehension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self.match(ErlangParser.T__13)
            self.state = 870
            self.expr()
            self.state = 871
            self.match(ErlangParser.T__32)
            self.state = 872
            self.lcExprs()
            self.state = 873
            self.match(ErlangParser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprMax(self):
            return self.getTypedRuleContext(ErlangParser.ExprMaxContext,0)


        def lcExprs(self):
            return self.getTypedRuleContext(ErlangParser.LcExprsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_binaryComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryComprehension" ):
                listener.enterBinaryComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryComprehension" ):
                listener.exitBinaryComprehension(self)




    def binaryComprehension(self):

        localctx = ErlangParser.BinaryComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_binaryComprehension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.match(ErlangParser.T__21)
            self.state = 876
            self.exprMax()
            self.state = 877
            self.match(ErlangParser.T__32)
            self.state = 878
            self.lcExprs()
            self.state = 879
            self.match(ErlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LcExprsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lcExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.LcExprContext)
            else:
                return self.getTypedRuleContext(ErlangParser.LcExprContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_lcExprs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLcExprs" ):
                listener.enterLcExprs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLcExprs" ):
                listener.exitLcExprs(self)




    def lcExprs(self):

        localctx = ErlangParser.LcExprsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_lcExprs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self.lcExpr()
            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ErlangParser.T__5:
                self.state = 882
                self.match(ErlangParser.T__5)
                self.state = 883
                self.lcExpr()
                self.state = 888
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LcExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.ExprContext)
            else:
                return self.getTypedRuleContext(ErlangParser.ExprContext,i)


        def binary(self):
            return self.getTypedRuleContext(ErlangParser.BinaryContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_lcExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLcExpr" ):
                listener.enterLcExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLcExpr" ):
                listener.exitLcExpr(self)




    def lcExpr(self):

        localctx = ErlangParser.LcExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_lcExpr)
        try:
            self.state = 898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 889
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 890
                self.expr()
                self.state = 891
                self.match(ErlangParser.T__33)
                self.state = 892
                self.expr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 894
                self.binary()
                self.state = 895
                self.match(ErlangParser.T__34)
                self.state = 896
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Re_tupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprs(self):
            return self.getTypedRuleContext(ErlangParser.ExprsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_re_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRe_tuple" ):
                listener.enterRe_tuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRe_tuple" ):
                listener.exitRe_tuple(self)




    def re_tuple(self):

        localctx = ErlangParser.Re_tupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_re_tuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.match(ErlangParser.T__7)
            self.state = 902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ErlangParser.T__1) | (1 << ErlangParser.T__2) | (1 << ErlangParser.T__7) | (1 << ErlangParser.T__13) | (1 << ErlangParser.T__16) | (1 << ErlangParser.T__17) | (1 << ErlangParser.T__21) | (1 << ErlangParser.T__24) | (1 << ErlangParser.T__29) | (1 << ErlangParser.T__35) | (1 << ErlangParser.T__36) | (1 << ErlangParser.T__38) | (1 << ErlangParser.T__40) | (1 << ErlangParser.T__41) | (1 << ErlangParser.T__42) | (1 << ErlangParser.T__43))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ErlangParser.TokAtom - 65)) | (1 << (ErlangParser.TokVar - 65)) | (1 << (ErlangParser.TokFloat - 65)) | (1 << (ErlangParser.TokInteger - 65)) | (1 << (ErlangParser.TokChar - 65)) | (1 << (ErlangParser.TokString - 65)))) != 0):
                self.state = 901
                self.exprs()


            self.state = 904
            self.match(ErlangParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapTuple(self):
            return self.getTypedRuleContext(ErlangParser.MapTupleContext,0)


        def exprMax(self):
            return self.getTypedRuleContext(ErlangParser.ExprMaxContext,0)


        def mapExpr(self):
            return self.getTypedRuleContext(ErlangParser.MapExprContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_mapExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapExpr" ):
                listener.enterMapExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapExpr" ):
                listener.exitMapExpr(self)



    def mapExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ErlangParser.MapExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 166
        self.enterRecursionRule(localctx, 166, self.RULE_mapExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ErlangParser.T__2) | (1 << ErlangParser.T__7) | (1 << ErlangParser.T__13) | (1 << ErlangParser.T__17) | (1 << ErlangParser.T__21) | (1 << ErlangParser.T__29) | (1 << ErlangParser.T__35) | (1 << ErlangParser.T__36) | (1 << ErlangParser.T__38) | (1 << ErlangParser.T__40))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ErlangParser.TokAtom - 65)) | (1 << (ErlangParser.TokVar - 65)) | (1 << (ErlangParser.TokFloat - 65)) | (1 << (ErlangParser.TokInteger - 65)) | (1 << (ErlangParser.TokChar - 65)) | (1 << (ErlangParser.TokString - 65)))) != 0):
                self.state = 907
                self.exprMax()


            self.state = 910
            self.match(ErlangParser.T__16)
            self.state = 911
            self.mapTuple()
            self._ctx.stop = self._input.LT(-1)
            self.state = 918
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ErlangParser.MapExprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mapExpr)
                    self.state = 913
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 914
                    self.match(ErlangParser.T__16)
                    self.state = 915
                    self.mapTuple() 
                self.state = 920
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MapTupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.MapFieldContext)
            else:
                return self.getTypedRuleContext(ErlangParser.MapFieldContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_mapTuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapTuple" ):
                listener.enterMapTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapTuple" ):
                listener.exitMapTuple(self)




    def mapTuple(self):

        localctx = ErlangParser.MapTupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_mapTuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.match(ErlangParser.T__7)
            self.state = 930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ErlangParser.T__1) | (1 << ErlangParser.T__2) | (1 << ErlangParser.T__7) | (1 << ErlangParser.T__13) | (1 << ErlangParser.T__16) | (1 << ErlangParser.T__17) | (1 << ErlangParser.T__21) | (1 << ErlangParser.T__24) | (1 << ErlangParser.T__29) | (1 << ErlangParser.T__35) | (1 << ErlangParser.T__36) | (1 << ErlangParser.T__38) | (1 << ErlangParser.T__40) | (1 << ErlangParser.T__41) | (1 << ErlangParser.T__42) | (1 << ErlangParser.T__43))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ErlangParser.TokAtom - 65)) | (1 << (ErlangParser.TokVar - 65)) | (1 << (ErlangParser.TokFloat - 65)) | (1 << (ErlangParser.TokInteger - 65)) | (1 << (ErlangParser.TokChar - 65)) | (1 << (ErlangParser.TokString - 65)))) != 0):
                self.state = 922
                self.mapField()
                self.state = 927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ErlangParser.T__5:
                    self.state = 923
                    self.match(ErlangParser.T__5)
                    self.state = 924
                    self.mapField()
                    self.state = 929
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 932
            self.match(ErlangParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapFieldAssoc(self):
            return self.getTypedRuleContext(ErlangParser.MapFieldAssocContext,0)


        def mapFieldExact(self):
            return self.getTypedRuleContext(ErlangParser.MapFieldExactContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_mapField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapField" ):
                listener.enterMapField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapField" ):
                listener.exitMapField(self)




    def mapField(self):

        localctx = ErlangParser.MapFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_mapField)
        try:
            self.state = 936
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 934
                self.mapFieldAssoc()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 935
                self.mapFieldExact()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapFieldAssocContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapKey(self):
            return self.getTypedRuleContext(ErlangParser.MapKeyContext,0)


        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_mapFieldAssoc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapFieldAssoc" ):
                listener.enterMapFieldAssoc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapFieldAssoc" ):
                listener.exitMapFieldAssoc(self)




    def mapFieldAssoc(self):

        localctx = ErlangParser.MapFieldAssocContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_mapFieldAssoc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.mapKey()
            self.state = 939
            self.match(ErlangParser.T__19)
            self.state = 940
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapFieldExactContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapKey(self):
            return self.getTypedRuleContext(ErlangParser.MapKeyContext,0)


        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_mapFieldExact

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapFieldExact" ):
                listener.enterMapFieldExact(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapFieldExact" ):
                listener.exitMapFieldExact(self)




    def mapFieldExact(self):

        localctx = ErlangParser.MapFieldExactContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_mapFieldExact)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.mapKey()
            self.state = 943
            self.match(ErlangParser.T__20)
            self.state = 944
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_mapKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapKey" ):
                listener.enterMapKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapKey" ):
                listener.exitMapKey(self)




    def mapKey(self):

        localctx = ErlangParser.MapKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_mapKey)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.TokAtomContext)
            else:
                return self.getTypedRuleContext(ErlangParser.TokAtomContext,i)


        def recordTuple(self):
            return self.getTypedRuleContext(ErlangParser.RecordTupleContext,0)


        def exprMax(self):
            return self.getTypedRuleContext(ErlangParser.ExprMaxContext,0)


        def recordExpr(self):
            return self.getTypedRuleContext(ErlangParser.RecordExprContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_recordExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordExpr" ):
                listener.enterRecordExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordExpr" ):
                listener.exitRecordExpr(self)



    def recordExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ErlangParser.RecordExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 178
        self.enterRecursionRule(localctx, 178, self.RULE_recordExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ErlangParser.T__2) | (1 << ErlangParser.T__7) | (1 << ErlangParser.T__13) | (1 << ErlangParser.T__17) | (1 << ErlangParser.T__21) | (1 << ErlangParser.T__29) | (1 << ErlangParser.T__35) | (1 << ErlangParser.T__36) | (1 << ErlangParser.T__38) | (1 << ErlangParser.T__40))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ErlangParser.TokAtom - 65)) | (1 << (ErlangParser.TokVar - 65)) | (1 << (ErlangParser.TokFloat - 65)) | (1 << (ErlangParser.TokInteger - 65)) | (1 << (ErlangParser.TokChar - 65)) | (1 << (ErlangParser.TokString - 65)))) != 0):
                self.state = 949
                self.exprMax()


            self.state = 952
            self.match(ErlangParser.T__16)
            self.state = 953
            self.tokAtom()
            self.state = 957
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ErlangParser.T__0]:
                self.state = 954
                self.match(ErlangParser.T__0)
                self.state = 955
                self.tokAtom()
                pass
            elif token in [ErlangParser.T__7]:
                self.state = 956
                self.recordTuple()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 969
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ErlangParser.RecordExprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_recordExpr)
                    self.state = 959
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 960
                    self.match(ErlangParser.T__16)
                    self.state = 961
                    self.tokAtom()
                    self.state = 965
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ErlangParser.T__0]:
                        self.state = 962
                        self.match(ErlangParser.T__0)
                        self.state = 963
                        self.tokAtom()
                        pass
                    elif token in [ErlangParser.T__7]:
                        self.state = 964
                        self.recordTuple()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 971
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class RecordTupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordFields(self):
            return self.getTypedRuleContext(ErlangParser.RecordFieldsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_recordTuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordTuple" ):
                listener.enterRecordTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordTuple" ):
                listener.exitRecordTuple(self)




    def recordTuple(self):

        localctx = ErlangParser.RecordTupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_recordTuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            self.match(ErlangParser.T__7)
            self.state = 974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ErlangParser.TokAtom or _la==ErlangParser.TokVar:
                self.state = 973
                self.recordFields()


            self.state = 976
            self.match(ErlangParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.RecordFieldContext)
            else:
                return self.getTypedRuleContext(ErlangParser.RecordFieldContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_recordFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordFields" ):
                listener.enterRecordFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordFields" ):
                listener.exitRecordFields(self)




    def recordFields(self):

        localctx = ErlangParser.RecordFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_recordFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self.recordField()
            self.state = 983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ErlangParser.T__5:
                self.state = 979
                self.match(ErlangParser.T__5)
                self.state = 980
                self.recordField()
                self.state = 985
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def tokVar(self):
            return self.getTypedRuleContext(ErlangParser.TokVarContext,0)


        def tokAtom(self):
            return self.getTypedRuleContext(ErlangParser.TokAtomContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_recordField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordField" ):
                listener.enterRecordField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordField" ):
                listener.exitRecordField(self)




    def recordField(self):

        localctx = ErlangParser.RecordFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_recordField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ErlangParser.TokVar]:
                self.state = 986
                self.tokVar()
                pass
            elif token in [ErlangParser.TokAtom]:
                self.state = 987
                self.tokAtom()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 990
            self.match(ErlangParser.T__25)
            self.state = 991
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr800(self):
            return self.getTypedRuleContext(ErlangParser.Expr800Context,0)


        def argumentList(self):
            return self.getTypedRuleContext(ErlangParser.ArgumentListContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)




    def functionCall(self):

        localctx = ErlangParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_functionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.expr800()
            self.state = 994
            self.argumentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifClauses(self):
            return self.getTypedRuleContext(ErlangParser.IfClausesContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_ifExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpr" ):
                listener.enterIfExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpr" ):
                listener.exitIfExpr(self)




    def ifExpr(self):

        localctx = ErlangParser.IfExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_ifExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 996
            self.match(ErlangParser.T__35)
            self.state = 997
            self.ifClauses()
            self.state = 998
            self.match(ErlangParser.T__30)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.IfClauseContext)
            else:
                return self.getTypedRuleContext(ErlangParser.IfClauseContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_ifClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfClauses" ):
                listener.enterIfClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfClauses" ):
                listener.exitIfClauses(self)




    def ifClauses(self):

        localctx = ErlangParser.IfClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_ifClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self.ifClause()
            self.state = 1005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ErlangParser.T__9:
                self.state = 1001
                self.match(ErlangParser.T__9)
                self.state = 1002
                self.ifClause()
                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def guard(self):
            return self.getTypedRuleContext(ErlangParser.GuardContext,0)


        def clauseBody(self):
            return self.getTypedRuleContext(ErlangParser.ClauseBodyContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_ifClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfClause" ):
                listener.enterIfClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfClause" ):
                listener.exitIfClause(self)




    def ifClause(self):

        localctx = ErlangParser.IfClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_ifClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self.guard()
            self.state = 1009
            self.clauseBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def crClauses(self):
            return self.getTypedRuleContext(ErlangParser.CrClausesContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_caseExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpr" ):
                listener.enterCaseExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpr" ):
                listener.exitCaseExpr(self)




    def caseExpr(self):

        localctx = ErlangParser.CaseExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_caseExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self.match(ErlangParser.T__36)
            self.state = 1012
            self.expr()
            self.state = 1013
            self.match(ErlangParser.T__37)
            self.state = 1014
            self.crClauses()
            self.state = 1015
            self.match(ErlangParser.T__30)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CrClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def crClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.CrClauseContext)
            else:
                return self.getTypedRuleContext(ErlangParser.CrClauseContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_crClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCrClauses" ):
                listener.enterCrClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCrClauses" ):
                listener.exitCrClauses(self)




    def crClauses(self):

        localctx = ErlangParser.CrClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_crClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.crClause()
            self.state = 1022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ErlangParser.T__9:
                self.state = 1018
                self.match(ErlangParser.T__9)
                self.state = 1019
                self.crClause()
                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CrClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def clauseGuard(self):
            return self.getTypedRuleContext(ErlangParser.ClauseGuardContext,0)


        def clauseBody(self):
            return self.getTypedRuleContext(ErlangParser.ClauseBodyContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_crClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCrClause" ):
                listener.enterCrClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCrClause" ):
                listener.exitCrClause(self)




    def crClause(self):

        localctx = ErlangParser.CrClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_crClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.expr()
            self.state = 1026
            self.clauseGuard()
            self.state = 1027
            self.clauseBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiveExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def crClauses(self):
            return self.getTypedRuleContext(ErlangParser.CrClausesContext,0)


        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def clauseBody(self):
            return self.getTypedRuleContext(ErlangParser.ClauseBodyContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_receiveExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiveExpr" ):
                listener.enterReceiveExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiveExpr" ):
                listener.exitReceiveExpr(self)




    def receiveExpr(self):

        localctx = ErlangParser.ReceiveExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_receiveExpr)
        try:
            self.state = 1046
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1029
                self.match(ErlangParser.T__38)
                self.state = 1030
                self.crClauses()
                self.state = 1031
                self.match(ErlangParser.T__30)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1033
                self.match(ErlangParser.T__38)
                self.state = 1034
                self.match(ErlangParser.T__39)
                self.state = 1035
                self.expr()
                self.state = 1036
                self.clauseBody()
                self.state = 1037
                self.match(ErlangParser.T__30)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1039
                self.match(ErlangParser.T__38)
                self.state = 1040
                self.crClauses()
                self.state = 1041
                self.match(ErlangParser.T__39)
                self.state = 1042
                self.expr()
                self.state = 1043
                self.clauseBody()
                self.state = 1044
                self.match(ErlangParser.T__30)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokAtom(self):
            return self.getTypedRuleContext(ErlangParser.TokAtomContext,0)


        def tokInteger(self):
            return self.getTypedRuleContext(ErlangParser.TokIntegerContext,0)


        def atomOrVar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.AtomOrVarContext)
            else:
                return self.getTypedRuleContext(ErlangParser.AtomOrVarContext,i)


        def integerOrVar(self):
            return self.getTypedRuleContext(ErlangParser.IntegerOrVarContext,0)


        def funClauses(self):
            return self.getTypedRuleContext(ErlangParser.FunClausesContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_funExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunExpr" ):
                listener.enterFunExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunExpr" ):
                listener.exitFunExpr(self)




    def funExpr(self):

        localctx = ErlangParser.FunExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_funExpr)
        try:
            self.state = 1064
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1048
                self.match(ErlangParser.T__17)
                self.state = 1049
                self.tokAtom()
                self.state = 1050
                self.match(ErlangParser.T__31)
                self.state = 1051
                self.tokInteger()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1053
                self.match(ErlangParser.T__17)
                self.state = 1054
                self.atomOrVar()
                self.state = 1055
                self.match(ErlangParser.T__4)
                self.state = 1056
                self.atomOrVar()
                self.state = 1057
                self.match(ErlangParser.T__31)
                self.state = 1058
                self.integerOrVar()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1060
                self.match(ErlangParser.T__17)
                self.state = 1061
                self.funClauses()
                self.state = 1062
                self.match(ErlangParser.T__30)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomOrVarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokAtom(self):
            return self.getTypedRuleContext(ErlangParser.TokAtomContext,0)


        def tokVar(self):
            return self.getTypedRuleContext(ErlangParser.TokVarContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_atomOrVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomOrVar" ):
                listener.enterAtomOrVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomOrVar" ):
                listener.exitAtomOrVar(self)




    def atomOrVar(self):

        localctx = ErlangParser.AtomOrVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_atomOrVar)
        try:
            self.state = 1068
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ErlangParser.TokAtom]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1066
                self.tokAtom()
                pass
            elif token in [ErlangParser.TokVar]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1067
                self.tokVar()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerOrVarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokInteger(self):
            return self.getTypedRuleContext(ErlangParser.TokIntegerContext,0)


        def tokVar(self):
            return self.getTypedRuleContext(ErlangParser.TokVarContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_integerOrVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerOrVar" ):
                listener.enterIntegerOrVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerOrVar" ):
                listener.exitIntegerOrVar(self)




    def integerOrVar(self):

        localctx = ErlangParser.IntegerOrVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_integerOrVar)
        try:
            self.state = 1072
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ErlangParser.TokInteger]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1070
                self.tokInteger()
                pass
            elif token in [ErlangParser.TokVar]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1071
                self.tokVar()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def funClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.FunClauseContext)
            else:
                return self.getTypedRuleContext(ErlangParser.FunClauseContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_funClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunClauses" ):
                listener.enterFunClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunClauses" ):
                listener.exitFunClauses(self)




    def funClauses(self):

        localctx = ErlangParser.FunClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_funClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            self.funClause()
            self.state = 1079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ErlangParser.T__9:
                self.state = 1075
                self.match(ErlangParser.T__9)
                self.state = 1076
                self.funClause()
                self.state = 1081
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patArgumentList(self):
            return self.getTypedRuleContext(ErlangParser.PatArgumentListContext,0)


        def clauseGuard(self):
            return self.getTypedRuleContext(ErlangParser.ClauseGuardContext,0)


        def clauseBody(self):
            return self.getTypedRuleContext(ErlangParser.ClauseBodyContext,0)


        def tokVar(self):
            return self.getTypedRuleContext(ErlangParser.TokVarContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_funClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunClause" ):
                listener.enterFunClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunClause" ):
                listener.exitFunClause(self)




    def funClause(self):

        localctx = ErlangParser.FunClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_funClause)
        try:
            self.state = 1091
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ErlangParser.T__2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1082
                self.patArgumentList()
                self.state = 1083
                self.clauseGuard()
                self.state = 1084
                self.clauseBody()
                pass
            elif token in [ErlangParser.TokVar]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1086
                self.tokVar()
                self.state = 1087
                self.patArgumentList()
                self.state = 1088
                self.clauseGuard()
                self.state = 1089
                self.clauseBody()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprs(self):
            return self.getTypedRuleContext(ErlangParser.ExprsContext,0)


        def tryCatch(self):
            return self.getTypedRuleContext(ErlangParser.TryCatchContext,0)


        def crClauses(self):
            return self.getTypedRuleContext(ErlangParser.CrClausesContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_tryExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryExpr" ):
                listener.enterTryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryExpr" ):
                listener.exitTryExpr(self)




    def tryExpr(self):

        localctx = ErlangParser.TryExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_tryExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1093
            self.match(ErlangParser.T__40)
            self.state = 1094
            self.exprs()
            self.state = 1097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ErlangParser.T__37:
                self.state = 1095
                self.match(ErlangParser.T__37)
                self.state = 1096
                self.crClauses()


            self.state = 1099
            self.tryCatch()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryCatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tryClauses(self):
            return self.getTypedRuleContext(ErlangParser.TryClausesContext,0)


        def exprs(self):
            return self.getTypedRuleContext(ErlangParser.ExprsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_tryCatch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryCatch" ):
                listener.enterTryCatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryCatch" ):
                listener.exitTryCatch(self)




    def tryCatch(self):

        localctx = ErlangParser.TryCatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_tryCatch)
        try:
            self.state = 1115
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1101
                self.match(ErlangParser.T__24)
                self.state = 1102
                self.tryClauses()
                self.state = 1103
                self.match(ErlangParser.T__30)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1105
                self.match(ErlangParser.T__24)
                self.state = 1106
                self.tryClauses()
                self.state = 1107
                self.match(ErlangParser.T__39)
                self.state = 1108
                self.exprs()
                self.state = 1109
                self.match(ErlangParser.T__30)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1111
                self.match(ErlangParser.T__39)
                self.state = 1112
                self.exprs()
                self.state = 1113
                self.match(ErlangParser.T__30)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tryClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.TryClauseContext)
            else:
                return self.getTypedRuleContext(ErlangParser.TryClauseContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_tryClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryClauses" ):
                listener.enterTryClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryClauses" ):
                listener.exitTryClauses(self)




    def tryClauses(self):

        localctx = ErlangParser.TryClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_tryClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1117
            self.tryClause()
            self.state = 1122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ErlangParser.T__9:
                self.state = 1118
                self.match(ErlangParser.T__9)
                self.state = 1119
                self.tryClause()
                self.state = 1124
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def clauseGuard(self):
            return self.getTypedRuleContext(ErlangParser.ClauseGuardContext,0)


        def clauseBody(self):
            return self.getTypedRuleContext(ErlangParser.ClauseBodyContext,0)


        def patExpr(self):
            return self.getTypedRuleContext(ErlangParser.PatExprContext,0)


        def tryOptStackTrace(self):
            return self.getTypedRuleContext(ErlangParser.TryOptStackTraceContext,0)


        def atomOrVar(self):
            return self.getTypedRuleContext(ErlangParser.AtomOrVarContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_tryClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryClause" ):
                listener.enterTryClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryClause" ):
                listener.exitTryClause(self)




    def tryClause(self):

        localctx = ErlangParser.TryClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_tryClause)
        try:
            self.state = 1139
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1125
                self.expr()
                self.state = 1126
                self.clauseGuard()
                self.state = 1127
                self.clauseBody()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1132
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 1129
                    self.atomOrVar()
                    self.state = 1130
                    self.match(ErlangParser.T__4)


                self.state = 1134
                self.patExpr()
                self.state = 1135
                self.tryOptStackTrace()
                self.state = 1136
                self.clauseGuard()
                self.state = 1137
                self.clauseBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryOptStackTraceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokVar(self):
            return self.getTypedRuleContext(ErlangParser.TokVarContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_tryOptStackTrace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryOptStackTrace" ):
                listener.enterTryOptStackTrace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryOptStackTrace" ):
                listener.exitTryOptStackTrace(self)




    def tryOptStackTrace(self):

        localctx = ErlangParser.TryOptStackTraceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_tryOptStackTrace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ErlangParser.T__4:
                self.state = 1141
                self.match(ErlangParser.T__4)
                self.state = 1142
                self.tokVar()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprs(self):
            return self.getTypedRuleContext(ErlangParser.ExprsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_argumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentList" ):
                listener.enterArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentList" ):
                listener.exitArgumentList(self)




    def argumentList(self):

        localctx = ErlangParser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_argumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1145
            self.match(ErlangParser.T__2)
            self.state = 1147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ErlangParser.T__1) | (1 << ErlangParser.T__2) | (1 << ErlangParser.T__7) | (1 << ErlangParser.T__13) | (1 << ErlangParser.T__16) | (1 << ErlangParser.T__17) | (1 << ErlangParser.T__21) | (1 << ErlangParser.T__24) | (1 << ErlangParser.T__29) | (1 << ErlangParser.T__35) | (1 << ErlangParser.T__36) | (1 << ErlangParser.T__38) | (1 << ErlangParser.T__40) | (1 << ErlangParser.T__41) | (1 << ErlangParser.T__42) | (1 << ErlangParser.T__43))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ErlangParser.TokAtom - 65)) | (1 << (ErlangParser.TokVar - 65)) | (1 << (ErlangParser.TokFloat - 65)) | (1 << (ErlangParser.TokInteger - 65)) | (1 << (ErlangParser.TokChar - 65)) | (1 << (ErlangParser.TokString - 65)))) != 0):
                self.state = 1146
                self.exprs()


            self.state = 1149
            self.match(ErlangParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patExprs(self):
            return self.getTypedRuleContext(ErlangParser.PatExprsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_patArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatArgumentList" ):
                listener.enterPatArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatArgumentList" ):
                listener.exitPatArgumentList(self)




    def patArgumentList(self):

        localctx = ErlangParser.PatArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_patArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1151
            self.match(ErlangParser.T__2)
            self.state = 1153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ErlangParser.T__1) | (1 << ErlangParser.T__2) | (1 << ErlangParser.T__7) | (1 << ErlangParser.T__13) | (1 << ErlangParser.T__16) | (1 << ErlangParser.T__21) | (1 << ErlangParser.T__41) | (1 << ErlangParser.T__42) | (1 << ErlangParser.T__43))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ErlangParser.TokAtom - 65)) | (1 << (ErlangParser.TokVar - 65)) | (1 << (ErlangParser.TokFloat - 65)) | (1 << (ErlangParser.TokInteger - 65)) | (1 << (ErlangParser.TokChar - 65)) | (1 << (ErlangParser.TokString - 65)))) != 0):
                self.state = 1152
                self.patExprs()


            self.state = 1155
            self.match(ErlangParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.ExprContext)
            else:
                return self.getTypedRuleContext(ErlangParser.ExprContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_exprs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprs" ):
                listener.enterExprs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprs" ):
                listener.exitExprs(self)




    def exprs(self):

        localctx = ErlangParser.ExprsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_exprs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1157
            self.expr()
            self.state = 1162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ErlangParser.T__5:
                self.state = 1158
                self.match(ErlangParser.T__5)
                self.state = 1159
                self.expr()
                self.state = 1164
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatExprsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.PatExprContext)
            else:
                return self.getTypedRuleContext(ErlangParser.PatExprContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_patExprs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatExprs" ):
                listener.enterPatExprs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatExprs" ):
                listener.exitPatExprs(self)




    def patExprs(self):

        localctx = ErlangParser.PatExprsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_patExprs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1165
            self.patExpr()
            self.state = 1170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ErlangParser.T__5:
                self.state = 1166
                self.match(ErlangParser.T__5)
                self.state = 1167
                self.patExpr()
                self.state = 1172
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.ExprsContext)
            else:
                return self.getTypedRuleContext(ErlangParser.ExprsContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_guard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGuard" ):
                listener.enterGuard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGuard" ):
                listener.exitGuard(self)




    def guard(self):

        localctx = ErlangParser.GuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_guard)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1173
            self.exprs()
            self.state = 1178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ErlangParser.T__9:
                self.state = 1174
                self.match(ErlangParser.T__9)
                self.state = 1175
                self.exprs()
                self.state = 1180
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokChar(self):
            return self.getTypedRuleContext(ErlangParser.TokCharContext,0)


        def tokInteger(self):
            return self.getTypedRuleContext(ErlangParser.TokIntegerContext,0)


        def tokFloat(self):
            return self.getTypedRuleContext(ErlangParser.TokFloatContext,0)


        def tokAtom(self):
            return self.getTypedRuleContext(ErlangParser.TokAtomContext,0)


        def tokString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.TokStringContext)
            else:
                return self.getTypedRuleContext(ErlangParser.TokStringContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_atomic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomic" ):
                listener.enterAtomic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomic" ):
                listener.exitAtomic(self)




    def atomic(self):

        localctx = ErlangParser.AtomicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_atomic)
        try:
            self.state = 1190
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ErlangParser.TokChar]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1181
                self.tokChar()
                pass
            elif token in [ErlangParser.TokInteger]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1182
                self.tokInteger()
                pass
            elif token in [ErlangParser.TokFloat]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1183
                self.tokFloat()
                pass
            elif token in [ErlangParser.TokAtom]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1184
                self.tokAtom()
                pass
            elif token in [ErlangParser.TokString]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1186 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1185
                        self.tokString()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1188 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ErlangParser.RULE_prefixOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixOp" ):
                listener.enterPrefixOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixOp" ):
                listener.exitPrefixOp(self)




    def prefixOp(self):

        localctx = ErlangParser.PrefixOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_prefixOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ErlangParser.T__1) | (1 << ErlangParser.T__41) | (1 << ErlangParser.T__42) | (1 << ErlangParser.T__43))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ErlangParser.RULE_multOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultOp" ):
                listener.enterMultOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultOp" ):
                listener.exitMultOp(self)




    def multOp(self):

        localctx = ErlangParser.MultOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_multOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1194
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ErlangParser.T__23) | (1 << ErlangParser.T__31) | (1 << ErlangParser.T__44) | (1 << ErlangParser.T__45) | (1 << ErlangParser.T__46) | (1 << ErlangParser.T__47))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ErlangParser.RULE_addOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddOp" ):
                listener.enterAddOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddOp" ):
                listener.exitAddOp(self)




    def addOp(self):

        localctx = ErlangParser.AddOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_addOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ErlangParser.T__1) | (1 << ErlangParser.T__41) | (1 << ErlangParser.T__48) | (1 << ErlangParser.T__49) | (1 << ErlangParser.T__50) | (1 << ErlangParser.T__51) | (1 << ErlangParser.T__52) | (1 << ErlangParser.T__53))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ErlangParser.RULE_listOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListOp" ):
                listener.enterListOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListOp" ):
                listener.exitListOp(self)




    def listOp(self):

        localctx = ErlangParser.ListOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_listOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1198
            _la = self._input.LA(1)
            if not(_la==ErlangParser.T__54 or _la==ErlangParser.T__55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ErlangParser.RULE_compOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompOp" ):
                listener.enterCompOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompOp" ):
                listener.exitCompOp(self)




    def compOp(self):

        localctx = ErlangParser.CompOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_compOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1200
            _la = self._input.LA(1)
            if not(((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & ((1 << (ErlangParser.T__56 - 57)) | (1 << (ErlangParser.T__57 - 57)) | (1 << (ErlangParser.T__58 - 57)) | (1 << (ErlangParser.T__59 - 57)) | (1 << (ErlangParser.T__60 - 57)) | (1 << (ErlangParser.T__61 - 57)) | (1 << (ErlangParser.T__62 - 57)) | (1 << (ErlangParser.T__63 - 57)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[23] = self.type300_sempred
        self._predicates[24] = self.type400_sempred
        self._predicates[58] = self.patExpr400_sempred
        self._predicates[59] = self.patExpr500_sempred
        self._predicates[65] = self.mapPatExpr_sempred
        self._predicates[83] = self.mapExpr_sempred
        self._predicates[89] = self.recordExpr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def type300_sempred(self, localctx:Type300Context, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def type400_sempred(self, localctx:Type400Context, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

    def patExpr400_sempred(self, localctx:PatExpr400Context, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def patExpr500_sempred(self, localctx:PatExpr500Context, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

    def mapPatExpr_sempred(self, localctx:MapPatExprContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         

    def mapExpr_sempred(self, localctx:MapExprContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         

    def recordExpr_sempred(self, localctx:RecordExprContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         




